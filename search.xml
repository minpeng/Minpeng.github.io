<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringBoot WebSocket使用</title>
      <link href="/2021/11/28/SpringBoot-WebSocket%E4%BD%BF%E7%94%A8/"/>
      <url>/2021/11/28/SpringBoot-WebSocket%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<contents><h2 id="spring-boot-webScoket使用"><a href="#spring-boot-webScoket使用" class="headerlink" title="spring boot webScoket使用"></a>spring boot webScoket使用</h2><h3 id="1-pom文件配置"><a href="#1-pom文件配置" class="headerlink" title="1.pom文件配置"></a>1.pom文件配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;spring-boot-starter-websocket&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="2-webSocket-bean配置"><a href="#2-webSocket-bean配置" class="headerlink" title="2.webSocket bean配置"></a>2.webSocket bean配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableWebSocket</span><br><span class="line">public class CafeWebSocketConfig implements WebSocketConfigurer &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) &#123;</span><br><span class="line">        //websocket 切点url</span><br><span class="line">        registry.addHandler(CafeWebSocketHandler(), &quot;/cafeWebSocket&quot;)</span><br><span class="line">                .addInterceptors(CafeHandshakeInterceptor());</span><br><span class="line">        //如果有跨域的情况,需要加入</span><br><span class="line">        setAllowedOrigins(&quot;*&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //注入处理逻辑</span><br><span class="line">    @Bean</span><br><span class="line">    public WebSocketHandler CafeWebSocketHandler() &#123;</span><br><span class="line">        return new CafeWebSocketHandler();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //注入拦截器</span><br><span class="line">    @Bean</span><br><span class="line">    public HandshakeInterceptor CafeHandshakeInterceptor() &#123;</span><br><span class="line">        return new CafeHandshakeInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-webSocket拦截器配置"><a href="#3-webSocket拦截器配置" class="headerlink" title="3.webSocket拦截器配置"></a>3.webSocket拦截器配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">//实现HandshakeInterceptor接口</span><br><span class="line">public class CafeHandshakeInterceptor implements HandshakeInterceptor &#123;</span><br><span class="line">    //权限url</span><br><span class="line">    private static final String PERMISSION=&quot;/webSocketUrl&quot;;</span><br><span class="line">    </span><br><span class="line">    //握手之前调用</span><br><span class="line">    //权限判断</span><br><span class="line">    @Override</span><br><span class="line">    public boolean beforeHandshake(ServerHttpRequest serverHttpRequest, ServerHttpResponse serverHttpResponse, WebSocketHandler webSocketHandler, Map&lt;String, Object&gt; map) throws Exception &#123;</span><br><span class="line">        ServletServerHttpRequest servletRequest = (ServletServerHttpRequest) serverHttpRequest;</span><br><span class="line"></span><br><span class="line">        //获取用户</span><br><span class="line">        boolean user = ShiroKit.isUser();</span><br><span class="line">        if(!user)&#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        //获取权限</span><br><span class="line">        //判断是否有webSocket权限</span><br><span class="line">        boolean permisson = ShiroKit.hasPermission(PERMISSION);</span><br><span class="line">        if(!permisson)&#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        //把账号信息放到webSocketSession中</span><br><span class="line">        map.put(WEBSOCKET_ACCOUNT,ShiroKit.getUser().getAccount());</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    //握手之后调用</span><br><span class="line">    @Override</span><br><span class="line">    public void afterHandshake(ServerHttpRequest serverHttpRequest, ServerHttpResponse serverHttpResponse, WebSocketHandler webSocketHandler, Exception e) &#123;</span><br><span class="line">        logger.info(ShiroKit.getUser().getAccount()+&quot;,成功连接cafeWebSocket...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-webSocket消息处理器"><a href="#4-webSocket消息处理器" class="headerlink" title="4.webSocket消息处理器"></a>4.webSocket消息处理器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class CafeWebSocketHandler extends TextWebSocketHandler &#123;</span><br><span class="line">    //全局session,可以存所有用户的session,但是不支持分布式</span><br><span class="line">    private final static CopyOnWriteArraySet&lt;WebSocketSession&gt; sessions = new CopyOnWriteArraySet&lt;&gt;();</span><br><span class="line">   </span><br><span class="line">   //在WebSocket协商成功后调用，并且打开WebSocket连接准备使用</span><br><span class="line">    @Override</span><br><span class="line">    public void afterConnectionEstablished(WebSocketSession session) throws Exception &#123;</span><br><span class="line">        super.afterConnectionEstablished(session);</span><br><span class="line">        sessions.add(session);</span><br><span class="line"></span><br><span class="line">        logger.info(&quot;【WebSocket】有新的连接, sessionId:&#123;&#125;,account:&#123;&#125;,总数:&#123;&#125;&quot;,</span><br><span class="line">                session.getId(), (String) session.getAttributes().get(WEBSOCKET_ACCOUNT), sessions.size());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //关闭webSocket连接</span><br><span class="line">    @Override</span><br><span class="line">    public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception &#123;</span><br><span class="line">        super.afterConnectionClosed(session, status);</span><br><span class="line">        sessions.remove(session);</span><br><span class="line">        logger.info(&quot;【WebSocket】连接断开, sessionId:&#123;&#125;,userName:&#123;&#125;,总数:&#123;&#125;&quot;,</span><br><span class="line">                session.getId(), (String) session.getAttributes().get(WEBSOCKET_ACCOUNT), sessions.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //发送消息</span><br><span class="line">    @Override</span><br><span class="line">    protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception &#123;</span><br><span class="line">        super.handleTextMessage(session, message);</span><br><span class="line">        session.sendMessage(message);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-前端配置"><a href="#5-前端配置" class="headerlink" title="5.前端配置"></a>5.前端配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">getWebSocket = function () &#123;</span><br><span class="line">    var webSocket = null;</span><br><span class="line">    var heartBeatMessage=&quot;HeartBeat&quot;;</span><br><span class="line">    if(&apos;WebSocket&apos; in window)&#123;</span><br><span class="line">        if(window.location.protocol===&quot;https:&quot;)&#123;</span><br><span class="line">            webSocket = new WebSocket(&apos;wss://&apos;+window.location.host+&apos;/webSocket&apos;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            webSocket = new WebSocket(&apos;ws://&apos;+window.location.host+&apos;/webSocket&apos;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        console.log(&quot;该浏览器不支持WebSocket!!!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    webSocket.onopen = function (event) &#123;</span><br><span class="line">        heartCheck.start();</span><br><span class="line">        console.log(&quot;建立连接&quot;);</span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    webSocket.onclose = function (event) &#123;</span><br><span class="line">        console.log(&quot;断开连接&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    webSocket.onmessage = function (event) &#123;</span><br><span class="line">        heartCheck.reset();</span><br><span class="line">        if(event.data==&apos;&apos;|| event.data==undefined ||</span><br><span class="line">            event.data==heartBeatMessage)&#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        //获取数据</span><br><span class="line">        var jsObject = JSON.parse(event.data);</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    webSocket.onerror = function (event) &#123;</span><br><span class="line">        console.log(&quot;websocket通信发生错误!!!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    window.onbeforeunload = function (event) &#123;</span><br><span class="line">        webSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //心跳检测</span><br><span class="line">    var heartCheck=&#123;</span><br><span class="line">        timeout: 58*1000,//58s</span><br><span class="line">        timeoutObj: null,</span><br><span class="line">        reset: function()&#123;</span><br><span class="line">            clearTimeout(this.timeoutObj);</span><br><span class="line">            this.start();</span><br><span class="line">        &#125;,</span><br><span class="line">        start: function()&#123;</span><br><span class="line">            this.timeoutObj = setTimeout(function()&#123;</span><br><span class="line">                webSocket.send(&quot;HeartBeat&quot;);</span><br><span class="line">            &#125;, this.timeout)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></contents>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo-github-action</title>
      <link href="/2021/11/28/hexo-github-action/"/>
      <url>/2021/11/28/hexo-github-action/</url>
      
        <content type="html"><![CDATA[<contents><h2 id="hexo-github-action自动部署"><a href="#hexo-github-action自动部署" class="headerlink" title="hexo-github-action自动部署"></a>hexo-github-action自动部署</h2><h3 id="workflow"><a href="#workflow" class="headerlink" title="workflow"></a>workflow</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">name:</span> <span class="string">deploying</span> <span class="string">Hexo</span> <span class="string">project</span> <span class="string">to</span> <span class="string">GitHub</span> <span class="string">pages</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span> <span class="comment"># master 分支有 push 行为时就触发这个 action</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build-and-deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="number">10.</span><span class="string">x</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="number">8.</span><span class="string">x</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">repository</span> <span class="string">and</span> <span class="string">submodules</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">submodules:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">alberk/hexo-deploy-github-pages-action@master</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">PERSONAL_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HEXO_DEPLOY</span> <span class="string">&#125;&#125;</span> <span class="comment"># secret 名</span></span><br><span class="line">          <span class="attr">PUBLISH_REPOSITORY:</span> <span class="string">Minpeng/Minpeng.github.io</span> <span class="comment"># 公共仓库，格式：GitHub 用户名/仓库名</span></span><br><span class="line">          <span class="attr">BRANCH:</span> <span class="string">gh-pages</span> <span class="comment"># 分支，填 gh-pages 就行</span></span><br><span class="line">          <span class="comment">#PUBLISH_DIR: ./public # 部署 public 目录下的文件</span></span><br></pre></td></tr></table></figure></contents>]]></content>
      
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>guava限流</title>
      <link href="/2021/11/23/guava%E9%99%90%E6%B5%81/"/>
      <url>/2021/11/23/guava%E9%99%90%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<contents><h2 id="guava限流"><a href="#guava限流" class="headerlink" title="guava限流"></a>guava限流</h2><h3 id="定义注解"><a href="#定义注解" class="headerlink" title="定义注解"></a>定义注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> GuavaRateLimit &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">limitNum</span><span class="params">()</span> <span class="keyword">default</span> 500</span>;  <span class="comment">//默认每秒放入桶中的token</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GuavaRateLimitInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RateLimiter rateLimiter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HttpServletResponse response;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用来存放不同接口的RateLimiter(key为接口名称，value为RateLimiter)</span></span><br><span class="line">    <span class="keyword">private</span> ConcurrentHashMap&lt;String, RateLimiter&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"serviceLimit()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object obj = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//获取拦截的方法名</span></span><br><span class="line">        Signature sig = joinPoint.getSignature();</span><br><span class="line">        <span class="comment">//获取拦截的方法名</span></span><br><span class="line">        MethodSignature msig = (MethodSignature) sig;</span><br><span class="line">        <span class="comment">//返回被织入增加处理目标对象</span></span><br><span class="line">        Object target = joinPoint.getTarget();</span><br><span class="line">        <span class="comment">//为了获取注解信息</span></span><br><span class="line">        Method currentMethod = target.getClass().getMethod(msig.getName(), msig.getParameterTypes());</span><br><span class="line">        <span class="comment">//获取注解信息</span></span><br><span class="line">        GuavaRateLimit annotation = currentMethod.getAnnotation(GuavaRateLimit<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">double</span> limitNum = annotation.limitNum(); <span class="comment">//获取注解每秒加入桶中的token</span></span><br><span class="line">        String functionName = msig.getName(); <span class="comment">// 注解所在方法名区分不同的限流策略</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取rateLimiter</span></span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(functionName)) &#123;</span><br><span class="line">            rateLimiter = map.get(functionName);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            map.put(functionName, RateLimiter.create(limitNum));</span><br><span class="line">            rateLimiter = map.get(functionName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rateLimiter.tryAcquire()) &#123;</span><br><span class="line">            <span class="comment">//执行方法</span></span><br><span class="line">            obj = joinPoint.proceed();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//拒绝了请求（服务降级）</span></span><br><span class="line">            String result = JsonUtil.toJson(<span class="keyword">new</span> MyException(ResultEnum.REQUEST_LIMIT));</span><br><span class="line">            log.info(<span class="string">"GuavaRateLimit &#123;&#125;"</span>, functionName);</span><br><span class="line">            outErrorResult(result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"@annotation(com.meal.aspect.GuavaRateLimit)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serviceLimit</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将结果返回</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outErrorResult</span><span class="params">(String result)</span> </span>&#123;</span><br><span class="line">        response.setContentType(MediaType.APPLICATION_JSON_UTF8_VALUE);</span><br><span class="line">        <span class="keyword">try</span> (ServletOutputStream outputStream = response.getOutputStream()) &#123;</span><br><span class="line">            outputStream.write(result.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></contents>]]></content>
      
      
      <categories>
          
          <category> guava </category>
          
      </categories>
      
      
        <tags>
            
            <tag> guava </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8Stream常用</title>
      <link href="/2020/03/21/java8Stream%E5%B8%B8%E7%94%A8/"/>
      <url>/2020/03/21/java8Stream%E5%B8%B8%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<contents><h2 id="java8Stream常用"><a href="#java8Stream常用" class="headerlink" title="java8Stream常用"></a>java8Stream常用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.stream某一个元素计数</span></span><br><span class="line"><span class="keyword">long</span> count = myInfoList.stream().mapToInt(item -&gt; item.getAge()).sum();</span><br><span class="line">System.out.println(count);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.stream过滤后某一个元素计数</span></span><br><span class="line"><span class="keyword">long</span> count2 = myInfoList.stream().filter(item -&gt; item.getAge() &gt; <span class="number">21</span>).mapToInt(item -&gt; item.getAge()).sum();</span><br><span class="line">System.out.println(count2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.过滤后统计集合大小</span></span><br><span class="line"><span class="keyword">long</span> count1 = myInfoList.stream().filter(item -&gt; item.getAge() &gt; <span class="number">21</span>).count();</span><br><span class="line">System.out.println(count1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.过滤后收集</span></span><br><span class="line">List&lt;MyInfo&gt; collect = myInfoList.stream().filter(item -&gt; item.getAge() &gt; <span class="number">21</span>).collect(Collectors.toList());</span><br><span class="line">System.out.println(collect);</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.判断是否有该元素</span></span><br><span class="line"><span class="keyword">boolean</span> flag = myInfoList.stream().anyMatch(item -&gt; item.getName().equals(<span class="string">"pengm1"</span>));</span><br><span class="line">System.out.println(flag);</span><br><span class="line"></span><br><span class="line"><span class="comment">//6.分组</span></span><br><span class="line">Map&lt;Integer, List&lt;MyInfo&gt;&gt; collect1 = myInfoList.stream().collect(Collectors.groupingBy(item -&gt; item.getAge()));</span><br><span class="line">System.out.println(collect1);</span><br><span class="line">Map&lt;Integer, Map&lt;String, List&lt;MyInfo&gt;&gt;&gt; collect2 = myInfoList.stream().collect(Collectors.groupingBy(item -&gt; item.getAge(), Collectors.groupingBy(item -&gt; item.getName())));</span><br><span class="line">System.out.println(collect2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//7.list转map</span></span><br><span class="line"> Map&lt;String, MyInfo&gt; myInfoMap= list.stream().collect(</span><br><span class="line">                Collectors.toMap(item -&gt; String.valueOf(item.getName()), item-&gt; item));</span><br><span class="line"></span><br><span class="line"><span class="comment">//8.map转list</span></span><br><span class="line">map.values().stream().collect(Collectors.toList());</span><br><span class="line">map.keySet().stream().collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//9.收集一个元素</span></span><br><span class="line">  List&lt;String&gt; uidList = myInfoList.stream()</span><br><span class="line">                .map(MyInfo::getUid)</span><br><span class="line">                .collect(Collectors.toList());</span><br></pre></td></tr></table></figure></contents>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git使用指南</title>
      <link href="/2019/11/05/git%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2019/11/05/git%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<contents><h2 id="git-使用指南"><a href="#git-使用指南" class="headerlink" title="git 使用指南"></a>git 使用指南</h2><h3 id="git-介绍"><a href="#git-介绍" class="headerlink" title="git 介绍"></a>git 介绍</h3><blockquote><p>C 语言编写的一个分布式版本控制系统</p></blockquote><ol><li>git 工作原理</li></ol><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcubXVrZXdhbmcuY29tLzU5YzMxZTQ0MDAwMTNiYzkxMTcyMDM0MC5wbmc?x-oss-process=image/format,png" alt="avatar"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Workspace：工作区</span><br><span class="line">Index / Stage：暂存区</span><br><span class="line">Repository：仓库区（或本地仓库）</span><br><span class="line">Remote：远程仓库</span><br></pre></td></tr></table></figure><p>2.git 和 svn 区别</p><ul><li>svn 集中式</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cubGlhb3h1ZWZlbmcuY29tL2ZpbGVzL2F0dGFjaG1lbnRzLzkxODkyMTU0MDM1NTg3Mi8w?x-oss-process=image/format,png" alt="avatar"></p><ul><li>git 分布式</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cubGlhb3h1ZWZlbmcuY29tL2ZpbGVzL2F0dGFjaG1lbnRzLzkxODkyMTU2MjIzNjE2MC8w?x-oss-process=image/format,png" alt="avatar"></p><blockquote><p>为什么说 git 是分布式的</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">这里的“分布式”是相对于“集中式”来说的。把数据集中保存在服务器节点，所有的客户节点都从服务节点获取数据的版本控制系统叫做集中式版本控制系统，比如svn就是典型的集中式版本控制系统。</span><br><span class="line"></span><br><span class="line">与之相对，git的数据不止保存在服务器上，同时也完整的保存在本地计算机上，所以我们称git为分布式版本控制系统。</span><br><span class="line"></span><br><span class="line">git的这种特性带来许多便利，比如你可以在完全离线的情况下使用git，随时随地提交项目更新，而且你不必为单点故障过分担心，即使服务器宕机或数据损毁，也可以用任何一个节点上的数据恢复项目，因为每一个开发节点都保存着完整的项目文件镜像。</span><br></pre></td></tr></table></figure><blockquote><p>git 和 svn 差异对比</p></blockquote><table><thead><tr><th style="text-align:left">差异点</th><th style="text-align:left">svn</th><th style="text-align:left">git</th></tr></thead><tbody><tr><td style="text-align:left">系统特点</td><td style="text-align:left">1.集中式版本控制系统（文档管理很方便) <br> 2.企业内部并行集中开发 <br>3.windows 系统上开发推荐使用<br>4.克隆一个拥有将近一万个提交(commit),五个分支,每个分支有大约 1500 个文件，用时将近一个小时</td><td style="text-align:left">1.分布式系统（代码管理很方便）<br>2.开源项目开发<br>3.mac,Linux 系统上开发推荐使用<br>4.克隆一个拥有将近一万个提交(commit),五个分支,每个分支有大约 1500 个文件，用时 1 分钟</td></tr><tr><td style="text-align:left">灵活性</td><td style="text-align:left">1.搭载 svn 的服务器出现故障，无法与之交互<br>2.所有的 svn 操作都需要中央仓库交互（例：拉分支，看日志等）</td><td style="text-align:left">1.可以单机操作，git 服务器故障也可以在本地 git 仓库工作<br>2.除了 push 和 pull（或 fetch）操作，其他都可以在本地操作<br>3.根据自己开发任务任意在本地创建分支 4.日志都是在本地查看，效率较高</td></tr><tr><td style="text-align:left">安全性</td><td style="text-align:left">较差，定期备份，并且是整个 svn 都得备份</td><td style="text-align:left">较高，每个开发者的本地就是一套完整版本库，记录着版本库的所有信息（gitlab 集成了备份功能）</td></tr><tr><td style="text-align:left">分支方面</td><td style="text-align:left">1.拉分支更像是 copy 一个路径<br>2.可针对任何子目录进行 branch<br>3.拉分支的时间较慢，因为拉分支相当于 copy<br>4.创建完分支后，影响全部成员，每个人都会拥有这个分支<br>5.多分支并行开发较重（工作较多而且繁琐）</td><td style="text-align:left">1.我可以在 Git 的任意一个提交点（commit point）开启分支！（git checkout -b newbranch HashId）<br>2.拉分支时间较快，因为拉分支只是创建文件的指针和 HEAD<br>3.自己本地创建的分支不会影响其他人<br>4.比较适合多分支并行开发<br>5.git checkout hash 值(切回之前的版本，无需版本回退)</td></tr><tr><td style="text-align:left">版本控制</td><td style="text-align:left">1.保存前后变化的差异数据，作为版本控制<br>2.版本号进行控制，每次操作都会产生一个高版本号（svn 的全局版本号，这是 svn 一个较大的特点，git 是 hash 值）</td><td style="text-align:left">1.git 只关心文件数据的整体发生变化，更像是把文件做快照，文件没有改变时，分支只想这个文件的指针不会改变，文件发生改变，指针指向新版本<br>\2. 40 位长的哈希值作为版本号，没有先后之分</td></tr><tr><td style="text-align:left">工作流程</td><td style="text-align:left">1.每次更改文件之前都得 update 操作，有的时候修改过程中这个文件有更新，commit 不会成功<br>2.有冲突，会打断提交动作（冲突解决是一个提交速度的竞赛：手快者，先提交，平安无事；手慢者，后提交，可能遇到麻烦的冲突解决。）</td><td style="text-align:left">1.开始工作前进行 fetch 操作，完成开发工作后 push 操作，有冲突解决冲突<br>2.git 的提交过程不会被打断，有冲突会标记冲突文件</td></tr><tr><td style="text-align:left">学习成本</td><td style="text-align:left">使用起来更方便，svn 对中文支持好，操作简单，适用于大众</td><td style="text-align:left">更在乎效率而不是易用性，成本较高（有很多独有的命令，rebase，远程仓库交互的命令，等等）</td></tr><tr><td style="text-align:left">权限管理</td><td style="text-align:left">svn 的权限管理相当严格，可以按组、个人针对某个子目录的权限控制（每个目录下都会有个.svn 的隐藏文件）</td><td style="text-align:left">git 没有严格的权限管理控制，只有账号角色划分</td></tr></tbody></table><h3 id="git-常用命令"><a href="#git-常用命令" class="headerlink" title="git 常用命令"></a>git 常用命令</h3><ol><li>初始化一个 git 仓库：git init</li><li>克隆仓库：git clone <url></url></li><li>添加文件（提交到缓存区）：git add <file></file></li><li>提交文件（提交到 HEAD）：git commit -m <message></message></li><li>推送改动(提交到远程仓库)：git push orgin &lt;branch_name&gt;</li><li>查看 git 仓库状态：git status</li><li>查看修改内容：git diff</li><li>查看提交日志：git log</li><li>回复版本：git reset –hard &lt;commit_id&gt;</li><li>创建分支：git branch &lt;branch_name&gt;</li><li>切换分支: git check &lt;branch_name&gt; /git switch &lt;branch_name&gt;</li><li>查看分支：git branch</li><li>合并分支：git merge &lt;branch_name&gt;</li><li>删除分支：git branch -d &lt;branch_name&gt;</li><li>查看远程库信息：git remore -v</li><li>显示标签：git tag</li><li>新建标签：git tag &lt;tag_name&gt;</li><li>新建带备注的标签：git tag -a &lt;tag_name&gt; -m &lt;tag_message&gt;</li><li>给某个 commit 答标签：git tag -a &lt;tag_name&gt; &lt;commit_id&gt; -m &lt;tag_message&gt;</li></ol><h3 id="tag-和-branche-的区别"><a href="#tag-和-branche-的区别" class="headerlink" title="tag 和 branche 的区别"></a>tag 和 branche 的区别</h3><ul><li><p>tag 对应某次 commit, 是一个点，是不可移动的（类似里程碑）</p></li><li><p>branch 对应一系列 commit，是很多点连成的一根线，有一个 HEAD 指针，是可以依靠 HEAD 指针移动的</p></li></ul><blockquote><p>git 有 commit，为什么还要引入 tag？</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&quot;请把上周一的那个版本打包发布，commit号是6a5819e…&quot;</span><br><span class="line"></span><br><span class="line">&quot;一串乱七八糟的数字不好找！&quot;</span><br><span class="line"></span><br><span class="line">如果换一个办法：</span><br><span class="line"></span><br><span class="line">&quot;请把上周一的那个版本打包发布，版本号是v1.2&quot;</span><br><span class="line"></span><br><span class="line">&quot;好的，按照tag v1.2查找commit就行！&quot;</span><br><span class="line"></span><br><span class="line">所以，tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。</span><br></pre></td></tr></table></figure><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.对代码进行修改</span><br><span class="line">2.完成了某项功能，提交（commit，只是提交到本地代码库），1-2可以反复进行，直到觉得可以推送到服务器上时，执行3</span><br><span class="line">3.拉取（pull，或者用获取 fetch 然后再手动合并 merge）</span><br><span class="line">4.如果存在冲突，解决冲突</span><br><span class="line">5.推送（push），将数据提交到服务器上的代码库</span><br></pre></td></tr></table></figure><h3 id="Eclipse-使用-git"><a href="#Eclipse-使用-git" class="headerlink" title="Eclipse 使用 git"></a>Eclipse 使用 git</h3><blockquote><p>右键-&gt;team</p></blockquote><ul><li><p>commit</p><p><img src="https://minpeng.github.io//image/eclipse/commit.png" alt="commit"></p><p><img src="https://minpeng.github.io//image/eclipse/commit-info.png" alt="commit"></p></li><li><p>push</p><p><img src="https://minpeng.github.io//image/eclipse/push.png" alt="commit"></p></li><li><p>pull</p><p><img src="https://minpeng.github.io//image/eclipse/pull.png" alt="pull"></p></li><li><p>分支</p><p><img src="https://minpeng.github.io//image/eclipse/branch.png" alt="branch"></p></li><li><p>合并</p><p><img src="https://minpeng.github.io//image/eclipse/merage.png" alt="merage"></p></li></ul><h3 id="idea-使用-git"><a href="#idea-使用-git" class="headerlink" title="idea 使用 git"></a>idea 使用 git</h3><ul><li><p>commit</p><p><img src="https://minpeng.github.io//image/idea/commit.png" alt="commit"></p><p><img src="https://minpeng.github.io//image/idea/commit-info.png" alt="commit"></p></li><li><p>push/pull</p><p><img src="https://minpeng.github.io//image/idea/pull-push.png" alt="commit"></p><p><img src="https://minpeng.github.io//image/idea/pull-push2.png" alt="commit"></p></li><li><p>分支</p><p><img src="https://minpeng.github.io//image/idea/branch1.png" alt="branch1"></p><p><img src="https://minpeng.github.io//image/idea/branch2.png" alt="branch1"></p></li><li><p>合并分支</p><p><img src="https://minpeng.github.io//image/idea/branchMerge.png" alt="branch1"></p></li><li><p>解决冲突</p><p><img src="https://minpeng.github.io//image/idea/conflict.png" alt="branch1"></p></li></ul><h3 id="gitlab-项目管理"><a href="#gitlab-项目管理" class="headerlink" title="gitlab 项目管理"></a>gitlab 项目管理</h3><ol><li><p>创建项目组</p><p><img src="https://minpeng.github.io//image/gitlab/create-group.png" alt="创建项目组"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">私有库：只有被赋予权限的用户可见</span><br><span class="line">内部库：登录用户可以下载</span><br><span class="line">公开库：所有人可以下载</span><br></pre></td></tr></table></figure></li><li><p>添加项目组成员</p></li></ol><p><img src="https://minpeng.github.io//image/gitlab/add-members.png" alt="添加项目组成员"></p><ol start="3"><li><p>创建项目</p><p><img src="https://minpeng.github.io//image/gitlab/create-project.png" alt="创建项目"></p></li><li><p>添加项目成员</p><p><img src="https://minpeng.github.io//image/gitlab/add-project-members.png" alt="添加项目成员"></p></li></ol><p>5) <strong>设置人员</strong></p><blockquote><p>人员权限</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Guest(游客):可以创建issue、发表评论，不能读写版本库</span><br><span class="line">Reporter(记者):可以克隆代码，不能提交</span><br><span class="line">Developer(开发者):可以克隆代码、开发、提交、push</span><br><span class="line">Master(主要维护者):可以创建项目、添加tag、保护分支、添加项目成员、编辑项目</span><br><span class="line">Owner(所属者):可以设置项目访问权限 - Visibility Level、删除项目、迁移项目、管理组成员</span><br></pre></td></tr></table></figure><blockquote><p>具体可看 <a href="https://docs.gitlab.com/ee/user/permissions.html" target="_blank" rel="noopener">https://docs.gitlab.com/ee/user/permissions.html</a></p></blockquote><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><blockquote><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/896043488029600</a></p><p><a href="https://juejin.im/entry/5b1faf61f265da6e5b7635b6" target="_blank" rel="noopener">https://juejin.im/entry/5b1faf61f265da6e5b7635b6</a></p><p><a href="https://www.bootcss.com/p/git-guide/" target="_blank" rel="noopener">https://www.bootcss.com/p/git-guide/</a></p></blockquote></contents>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot自定义配置文件区分环境</title>
      <link href="/2019/08/24/SpringBoot%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8C%BA%E5%88%86%E7%8E%AF%E5%A2%83/"/>
      <url>/2019/08/24/SpringBoot%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8C%BA%E5%88%86%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<contents><h2 id="SpringBoot自定义配置文件区分环境配置"><a href="#SpringBoot自定义配置文件区分环境配置" class="headerlink" title="SpringBoot自定义配置文件区分环境配置"></a>SpringBoot自定义配置文件区分环境配置</h2><blockquote><p>自定义的配置文件也要区分环境</p></blockquote><h3 id="1-设置自定义的配置文件"><a href="#1-设置自定义的配置文件" class="headerlink" title="1.设置自定义的配置文件"></a>1.设置自定义的配置文件</h3><ul><li>my-dev.properties</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##只写一个属性方便测试</span><br><span class="line"></span><br><span class="line">my.name=dev</span><br></pre></td></tr></table></figure><ul><li>my-test.properties</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##只写一个属性方便测试</span><br><span class="line">my.name=test</span><br></pre></td></tr></table></figure><h3 id="2-编写配置文件实体类"><a href="#2-编写配置文件实体类" class="headerlink" title="2.编写配置文件实体类"></a>2.编写配置文件实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义配置文件属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyConfig</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-编写配置文件接口"><a href="#2-编写配置文件接口" class="headerlink" title="2.编写配置文件接口"></a>2.编写配置文件接口</h3><blockquote><p>方便spring注入,也可以增加业务逻辑</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置文件接口,方便注入或者做一些其他业务逻辑</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IMyConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取配置文件属性</span></span><br><span class="line">    <span class="function">MyConfig <span class="title">getMyConfig</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-编写不同环境下对应的实体类"><a href="#3-编写不同环境下对应的实体类" class="headerlink" title="3.编写不同环境下对应的实体类"></a>3.编写不同环境下对应的实体类</h3><ul><li><p>test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * test环境配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"myConfig"</span>)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//文件名</span></span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:my-test.properties"</span>)</span><br><span class="line"><span class="comment">//前缀</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix=<span class="string">"my"</span>)</span><br><span class="line"><span class="comment">//test环境</span></span><br><span class="line"><span class="meta">@Profile</span>(<span class="string">"test"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfigTest</span> <span class="keyword">implements</span> <span class="title">IMyConfig</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyConfig <span class="title">getMyConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyConfig(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>dev</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * dev环境配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"myConfig"</span>)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//文件名</span></span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:my-dev.properties"</span>)</span><br><span class="line"><span class="comment">//前缀</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix=<span class="string">"my"</span>)</span><br><span class="line"><span class="comment">//dev环境</span></span><br><span class="line"><span class="meta">@Profile</span>(<span class="string">"dev"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfigDev</span> <span class="keyword">implements</span> <span class="title">IMyConfig</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyConfig <span class="title">getMyConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyConfig(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-编写测试类验证"><a href="#4-编写测试类验证" class="headerlink" title="4.编写测试类验证"></a>4.编写测试类验证</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ApplicationTests</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">IMyConfig myConfig;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMyConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">MyConfig myConfig = <span class="keyword">this</span>.myConfig.getMyConfig();</span><br><span class="line"><span class="comment">//修改不同环境可以得到不同的值</span></span><br><span class="line">System.out.println(myConfig.getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></contents>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>quill富文本编辑器自定义上传图片</title>
      <link href="/2019/08/12/quill%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/"/>
      <url>/2019/08/12/quill%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<contents><h1 id="quill富文本自定义上传组件"><a href="#quill富文本自定义上传组件" class="headerlink" title="quill富文本自定义上传组件"></a>quill富文本自定义上传组件</h1><blockquote><p>富文本编辑器quill在上传图片的时候会转换为base64格式，这样后端直接存图片而不是图片地址了，需要修改为存图片地址的方式,在查看github之后发现可以增加一个自定义toolbar来解决</p></blockquote><ol><li>增加自定义的toolbar</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;quill-editor (onEditorCreated)=&quot;EditorCreated($event)&quot; [(ngModel)]=&quot;data[&apos;noticeContent&apos;]&quot; formControlName=&quot;noticeContent&quot;&gt;</span><br><span class="line">               &lt;div quill-editor-toolbar&gt;</span><br><span class="line">                   </span><br><span class="line">                   &lt;span class=&quot;ql-formats&quot;&gt;</span><br><span class="line"></span><br><span class="line">                       &lt;button nz-button type=&quot;button&quot; (click)=&quot;customButtonClick($event)&quot; class=&quot;ql-image&quot;&gt;imgage&lt;/button&gt;</span><br><span class="line">                       &lt;input class=&quot;open-file&quot; type=&quot;file&quot; name=&quot;file&quot; id=&quot;file&quot; </span><br><span class="line">                       accept=&quot;image/png, image/gif, image/jpeg, image/bmp, image/x-icon&quot;</span><br><span class="line">                       style=&quot;display: none;&quot; (change)=&quot;upload($event)&quot; multiple=&quot;false&quot;</span><br><span class="line">                       /&gt;</span><br><span class="line">                   &lt;/span&gt;</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">               &lt;/div&gt;</span><br><span class="line">           &lt;/quill-editor&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>编写customButtonClick和upload方法</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  EditorCreated(quill) &#123;</span><br><span class="line">    this.editor = quill;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  customButtonClick(quill)&#123;</span><br><span class="line"></span><br><span class="line">    var range = this.editor.getSelection(true);</span><br><span class="line">    var  length = range.index;</span><br><span class="line">//弹出文件选择框调用upload方法</span><br><span class="line">    this.el.nativeElement.querySelector(&apos;.open-file&apos;).click();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  uploadImg()&#123;</span><br><span class="line"></span><br><span class="line">    this.file = [];</span><br><span class="line">    let imgFile=window.document.getElementById(&apos;file&apos;)[&apos;files&apos;][0];</span><br><span class="line">    if(imgFile==null)&#123;</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line">    this.file.push(imgFile);</span><br><span class="line"></span><br><span class="line">    if (this.file &amp;&amp; this.file !== null &amp;&amp; this.file.length&gt;=1) &#123;</span><br><span class="line"> //上传图片</span><br><span class="line">      this.service.imageUpload(this.file).subscribe(res =&gt; &#123;</span><br><span class="line">        if (res[&apos;body&apos;]) &#123;</span><br><span class="line">          if (res[&apos;body&apos;][&apos;resCode&apos;] === 20000) &#123;</span><br><span class="line">            let imgUrl=res[&apos;body&apos;][&apos;data&apos;][0]</span><br><span class="line">            if(imgUrl!=null)&#123;</span><br><span class="line">              this.editor.insertEmbed(length, &apos;image&apos;,imgUrl);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">          &#125;else &#123;</span><br><span class="line">            this.message.create(&apos;error&apos;, res[&apos;body&apos;][&apos;resCode&apos;]);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>参考资料<blockquote><p><a href="https://github.com/surmon-china/vue-quill-editor/issues/21" target="_blank" rel="noopener">https://github.com/surmon-china/vue-quill-editor/issues/21</a><br><a href="https://github.com/surmon-china/vue-quill-editor/blob/master/examples/03-example.vue#L34" target="_blank" rel="noopener">https://github.com/surmon-china/vue-quill-editor/blob/master/examples/03-example.vue#L34</a></p></blockquote></li></ol></contents>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> quill </tag>
            
            <tag> angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot事务解析</title>
      <link href="/2019/08/12/SpringBoot%E4%BA%8B%E5%8A%A1%E8%A7%A3%E6%9E%90/"/>
      <url>/2019/08/12/SpringBoot%E4%BA%8B%E5%8A%A1%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<contents><h2 id="SpringBoot事务详解"><a href="#SpringBoot事务详解" class="headerlink" title="SpringBoot事务详解"></a>SpringBoot事务详解</h2><blockquote><p>SpringBoot-2.1.3.RELEASE版本事务解析</p></blockquote><h3 id="1-spring事务猜想"><a href="#1-spring事务猜想" class="headerlink" title="1.spring事务猜想"></a>1.spring事务猜想</h3><blockquote><p>使用切面再方法执行前开启事务，执行完提交事务，如果有异常，则回滚事务</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">## Mysql事务流程</span><br><span class="line"></span><br><span class="line">##1.开启事务</span><br><span class="line">begin; </span><br><span class="line">##2.提交事务</span><br><span class="line">commit;</span><br><span class="line">##3.如果有异常需要回滚事务</span><br><span class="line">rollback；</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jdbc使用事务流程</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.获取连接</span></span><br><span class="line">Connection conn = DataSourceUtils.getConnection();</span><br><span class="line"><span class="comment">//2.开启事务</span></span><br><span class="line">conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//3.执行业务sql操作</span></span><br><span class="line">   doSomething(conn);</span><br><span class="line">    <span class="comment">//4.提交事务</span></span><br><span class="line">    conn.commit();</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="comment">//回滚事务</span></span><br><span class="line">    conn.rollback();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">    conn.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-spring注解-transactional"><a href="#2-spring注解-transactional" class="headerlink" title="2.spring注解@transactional"></a>2.spring注解@transactional</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Transactional &#123;</span><br><span class="line">    <span class="comment">//当在配置文件中有多个 TransactionManager , 可以用该属性指定选择哪个事务管理器</span></span><br><span class="line">    <span class="meta">@AliasFor</span>(<span class="string">"transactionManager"</span>)</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(<span class="string">"value"</span>)</span><br><span class="line">    <span class="function">String <span class="title">transactionManager</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"><span class="comment">//事务传播机制</span></span><br><span class="line">    <span class="function">Propagation <span class="title">propagation</span><span class="params">()</span> <span class="keyword">default</span> Propagation.REQUIRED</span>;</span><br><span class="line"><span class="comment">//事务隔离级别</span></span><br><span class="line">    <span class="function">Isolation <span class="title">isolation</span><span class="params">()</span> <span class="keyword">default</span> Isolation.DEFAULT</span>;</span><br><span class="line"><span class="comment">//超时时间</span></span><br><span class="line">    <span class="comment">//如果超过该时间限制但事务还没有完成，则自动回滚事务。</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">timeout</span><span class="params">()</span> <span class="keyword">default</span> -1</span>;</span><br><span class="line"><span class="comment">//事务只读</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">readOnly</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line"><span class="comment">//用于指定能够触发事务回滚的异常类型，如果有多个异常类型需要指定，各类型之间可以通过逗号分隔</span></span><br><span class="line">    Class&lt;? extends Throwable&gt;[] rollbackFor() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] rollbackForClassName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"><span class="comment">//抛出 no-rollback-for 指定的异常类型，不回滚事务。</span></span><br><span class="line">    Class&lt;? extends Throwable&gt;[] noRollbackFor() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] noRollbackForClassName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-spring执行-transactional"><a href="#3-spring执行-transactional" class="headerlink" title="3.spring执行@transactional"></a>3.spring执行@transactional</h4><blockquote><p>一个事务方法执行流程</p></blockquote><ul><li><p>获取事务属性</p></li><li><p>获取事务管理器</p></li><li><p>获取需要事务的方法名称/获取该方法上事务的信息</p></li><li><p>目标方法执行</p></li><li><p>清除事务信息</p></li><li><p>事务回滚</p></li><li><p>事务提交</p></li></ul><blockquote><p>事务执行方法TransactionAspectSupport</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionAspectSupport</span> <span class="keyword">implements</span> <span class="title">BeanFactoryAware</span>, <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">invokeWithinTransaction</span><span class="params">(Method method, @Nullable Class&lt;?&gt; targetClass, TransactionAspectSupport.InvocationCallback invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">// 读取事务的属性和设置</span></span><br><span class="line">        TransactionAttributeSource tas = <span class="keyword">this</span>.getTransactionAttributeSource();</span><br><span class="line">        TransactionAttribute txAttr = tas != <span class="keyword">null</span> ? tas.getTransactionAttribute(method, targetClass) : <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 获取 beanFactory 中的 transactionManager</span></span><br><span class="line">        PlatformTransactionManager tm = <span class="keyword">this</span>.determineTransactionManager(txAttr);</span><br><span class="line">        String joinpointIdentification = <span class="keyword">this</span>.methodIdentification(method, targetClass, txAttr);</span><br><span class="line">        Object result;</span><br><span class="line">        <span class="comment">//编程式事务（需要加入处理事务逻辑，需要显示调用事务方法）</span></span><br><span class="line">        <span class="keyword">if</span> (txAttr != <span class="keyword">null</span> &amp;&amp; tm <span class="keyword">instanceof</span> CallbackPreferringPlatformTransactionManager) &#123;</span><br><span class="line">            TransactionAspectSupport.ThrowableHolder throwableHolder = <span class="keyword">new</span> TransactionAspectSupport.ThrowableHolder();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                result = ((CallbackPreferringPlatformTransactionManager)tm).execute(txAttr, (status) -&gt; &#123;</span><br><span class="line">                   </span><br><span class="line">                    TransactionAspectSupport.TransactionInfo txInfo = <span class="keyword">this</span>.prepareTransactionInfo(tm, txAttr, joinpointIdentification, status);</span><br><span class="line"></span><br><span class="line">                    Object var9;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//目标方法执行</span></span><br><span class="line">                        Object var8 = invocation.proceedWithInvocation();</span><br><span class="line">                        <span class="keyword">return</span> var8;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable var13) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (txAttr.rollbackOn(var13)) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (var13 <span class="keyword">instanceof</span> RuntimeException) &#123;</span><br><span class="line">                                <span class="keyword">throw</span> (RuntimeException)var13;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> TransactionAspectSupport.ThrowableHolderException(var13);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        throwableHolder.throwable = var13;</span><br><span class="line">                        var9 = <span class="keyword">null</span>;</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        <span class="comment">//清除事务信息</span></span><br><span class="line">                        <span class="keyword">this</span>.cleanupTransactionInfo(txInfo);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> var9;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">if</span> (throwableHolder.throwable != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> throwableHolder.throwable;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (TransactionAspectSupport.ThrowableHolderException var19) &#123;</span><br><span class="line">                <span class="keyword">throw</span> var19.getCause();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (TransactionSystemException var20) &#123;</span><br><span class="line">                <span class="keyword">if</span> (throwableHolder.throwable != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.logger.error(<span class="string">"Application exception overridden by commit exception"</span>, throwableHolder.throwable);</span><br><span class="line">                    var20.initApplicationException(throwableHolder.throwable);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">throw</span> var20;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable var21) &#123;</span><br><span class="line">                <span class="keyword">if</span> (throwableHolder.throwable != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.logger.error(<span class="string">"Application exception overridden by commit exception"</span>, throwableHolder.throwable);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">throw</span> var21;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 声明式事务</span></span><br><span class="line">            <span class="comment">// 构建事务相关信息</span></span><br><span class="line">            TransactionAspectSupport.TransactionInfo txInfo = <span class="keyword">this</span>.createTransactionIfNecessary(tm, txAttr, joinpointIdentification);</span><br><span class="line">            result = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                result = invocation.proceedWithInvocation();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable var17) &#123;</span><br><span class="line">               <span class="comment">// 如果出现异常，则进行回滚</span></span><br><span class="line">                <span class="keyword">this</span>.completeTransactionAfterThrowing(txInfo, var17);</span><br><span class="line">                <span class="keyword">throw</span> var17;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.cleanupTransactionInfo(txInfo);</span><br><span class="line">            &#125;</span><br><span class="line"> <span class="comment">// 这里通过事务处理器来对事务进行提交</span></span><br><span class="line">            <span class="keyword">this</span>.commitTransactionAfterReturning(txInfo);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-spring事务常量"><a href="#4-spring事务常量" class="headerlink" title="4.spring事务常量"></a>4.spring事务常量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TransactionDefinition</span> </span>&#123;</span><br><span class="line"><span class="comment">//传播性</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。默认为这个</span></span><br><span class="line">    <span class="keyword">int</span> PROPAGATION_REQUIRED = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//支持当前事务，如果当前没有事务，就以非事务方式执行</span></span><br><span class="line">    <span class="keyword">int</span> PROPAGATION_SUPPORTS = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//使用当前的事务，如果当前没有事务，就抛出异常。</span></span><br><span class="line">    <span class="keyword">int</span> PROPAGATION_MANDATORY = <span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//新建事务，如果当前存在事务，把当前事务挂起。</span></span><br><span class="line">    <span class="keyword">int</span> PROPAGATION_REQUIRES_NEW = <span class="number">3</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</span></span><br><span class="line">    <span class="keyword">int</span> PROPAGATION_NOT_SUPPORTED = <span class="number">4</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//以非事务方式执行，如果当前存在事务，则抛出异常。</span></span><br><span class="line">    <span class="keyword">int</span> PROPAGATION_NEVER = <span class="number">5</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作</span></span><br><span class="line">    <span class="keyword">int</span> PROPAGATION_NESTED = <span class="number">6</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//隔离级别</span></span><br><span class="line">    <span class="comment">//使用数据库默认的隔离级别-可重复读的</span></span><br><span class="line">    <span class="keyword">int</span> ISOLATION_DEFAULT = -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//允许读取尚未提交的更改。可能导致脏读、幻影读或不可重复读</span></span><br><span class="line">    <span class="keyword">int</span> ISOLATION_READ_UNCOMMITTED = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//允许从已经提交的并发事务读取。可防止脏读，但幻影读和不可重复读仍可能会发生。</span></span><br><span class="line">    <span class="keyword">int</span> ISOLATION_READ_COMMITTED = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//对相同字段的多次读取的结果是一致的，除非数据被当前事务本身改变。可防止脏读和不可重复读，但幻影读仍可能发生</span></span><br><span class="line">    <span class="keyword">int</span> ISOLATION_REPEATABLE_READ = <span class="number">4</span>;</span><br><span class="line">    <span class="comment">//完全服从ACID的隔离级别，确保不发生脏读、不可重复读和幻影读。这在所有隔离级别中也是最慢的，因为它通常是通过完全锁定当前事务所涉及的数据表来完成的。</span></span><br><span class="line">    <span class="keyword">int</span> ISOLATION_SERIALIZABLE = <span class="number">8</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="5-spring事务管理接口"><a href="#5-spring事务管理接口" class="headerlink" title="5. spring事务管理接口"></a>5. spring事务管理接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//平台事务管理接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PlatformTransactionManager</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取事务状态</span></span><br><span class="line">    <span class="function">TransactionStatus <span class="title">getTransaction</span><span class="params">(@Nullable TransactionDefinition var1)</span> <span class="keyword">throws</span> TransactionException</span>;</span><br><span class="line"><span class="comment">//提交事务</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">commit</span><span class="params">(TransactionStatus var1)</span> <span class="keyword">throws</span> TransactionException</span>;</span><br><span class="line"><span class="comment">//回滚事务</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rollback</span><span class="params">(TransactionStatus var1)</span> <span class="keyword">throws</span> TransactionException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-事务状态TransactionStatus"><a href="#6-事务状态TransactionStatus" class="headerlink" title="6.事务状态TransactionStatus"></a>6.事务状态TransactionStatus</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultTransactionStatus</span> <span class="keyword">extends</span> <span class="title">AbstractTransactionStatus</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="comment">// 事务连接器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object transaction;</span><br><span class="line">    <span class="comment">// 是否是新事务</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> newTransaction;</span><br><span class="line">    <span class="comment">// 是否开启 事务同步器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> newSynchronization;</span><br><span class="line">    <span class="comment">// 这个事务是否是 readOnly</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> readOnly;</span><br><span class="line">    <span class="comment">//是否debug模式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> debug;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="comment">//事务是否需要挂起</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object suspendedResources;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-spring事务管理实现类-AbstractPlatformTransactionManager"><a href="#7-spring事务管理实现类-AbstractPlatformTransactionManager" class="headerlink" title="7.spring事务管理实现类 -AbstractPlatformTransactionManager"></a>7.spring事务管理实现类 -AbstractPlatformTransactionManager</h3><ul><li>getTransaction()方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> TransactionStatus <span class="title">getTransaction</span><span class="params">(@Nullable TransactionDefinition definition)</span> <span class="keyword">throws</span> TransactionException </span>&#123;</span><br><span class="line">        Object transaction = <span class="keyword">this</span>.doGetTransaction();</span><br><span class="line">        <span class="keyword">boolean</span> debugEnabled = <span class="keyword">this</span>.logger.isDebugEnabled();</span><br><span class="line">        <span class="keyword">if</span> (definition == <span class="keyword">null</span>) &#123;</span><br><span class="line">            definition = <span class="keyword">new</span> DefaultTransactionDefinition();</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 如果当前已经存在事务</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isExistingTransaction(transaction)) &#123;</span><br><span class="line">            <span class="comment">// 根据不同传播机制不同处理</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.handleExistingTransaction((TransactionDefinition)definition, transaction, debugEnabled);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (((TransactionDefinition)definition).getTimeout() &lt; -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 超时不能小于-1</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidTimeoutException(<span class="string">"Invalid transaction timeout"</span>, ((TransactionDefinition)definition).getTimeout());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (((TransactionDefinition)definition).getPropagationBehavior() == <span class="number">2</span>) &#123;</span><br><span class="line">           <span class="comment">// 当前不存在事务，传播机制=MANDATORY（支持当前事务，没事务报错），报错</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalTransactionStateException(<span class="string">"No existing transaction found for transaction marked with propagation 'mandatory'"</span>);</span><br><span class="line">        &#125; </span><br><span class="line">    <span class="comment">//// 当前不存在事务，传播机制=REQUIRED/REQUIRED_NEW/NESTED,这三种情况，需要新开启事务，且加上事务同步</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (((TransactionDefinition)definition).getPropagationBehavior() != <span class="number">0</span> &amp;&amp; ((TransactionDefinition)definition).getPropagationBehavior() != <span class="number">3</span> &amp;&amp; ((TransactionDefinition)definition).getPropagationBehavior() != <span class="number">6</span>) &#123;</span><br><span class="line">        <span class="comment">//事务隔离级别不是默认的</span></span><br><span class="line">            <span class="keyword">if</span> (((TransactionDefinition)definition).getIsolationLevel() != -<span class="number">1</span> &amp;&amp; <span class="keyword">this</span>.logger.isWarnEnabled()) &#123;</span><br><span class="line">                <span class="keyword">this</span>.logger.warn(<span class="string">"Custom isolation level specified but no actual transaction initiated; isolation level will effectively be ignored: "</span> + definition);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//是否需要新开启同步</span></span><br><span class="line">            <span class="keyword">boolean</span> newSynchronization = <span class="keyword">this</span>.getTransactionSynchronization() == <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.prepareTransactionStatus((TransactionDefinition)definition, (Object)<span class="keyword">null</span>, <span class="keyword">true</span>, newSynchronization, debugEnabled, (Object)<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            AbstractPlatformTransactionManager.SuspendedResourcesHolder suspendedResources = <span class="keyword">this</span>.suspend((Object)<span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (debugEnabled) &#123;</span><br><span class="line">                <span class="keyword">this</span>.logger.debug(<span class="string">"Creating new transaction with name ["</span> + ((TransactionDefinition)definition).getName() + <span class="string">"]: "</span> + definition);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//public static final int SYNCHRONIZATION_NEVER = 2;</span></span><br><span class="line"> <span class="comment">//2的含义：永不开启同步              </span></span><br><span class="line">                <span class="keyword">boolean</span> newSynchronization = <span class="keyword">this</span>.getTransactionSynchronization() != <span class="number">2</span>;</span><br><span class="line">                DefaultTransactionStatus status = <span class="keyword">this</span>.newTransactionStatus((TransactionDefinition)definition, transaction, <span class="keyword">true</span>, newSynchronization, debugEnabled, suspendedResources);</span><br><span class="line">                <span class="comment">// 开启新事务</span></span><br><span class="line">                <span class="keyword">this</span>.doBegin(transaction, (TransactionDefinition)definition);</span><br><span class="line">                <span class="comment">//预备同步</span></span><br><span class="line">                <span class="keyword">this</span>.prepareSynchronization(status, (TransactionDefinition)definition);</span><br><span class="line">                <span class="keyword">return</span> status;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Error | RuntimeException var7) &#123;</span><br><span class="line">                <span class="keyword">this</span>.resume((Object)<span class="keyword">null</span>, suspendedResources);</span><br><span class="line">                <span class="keyword">throw</span> var7;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>handleExistingTransaction存在事务之后处理方法(根据事务传播级别)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> TransactionStatus <span class="title">handleExistingTransaction</span><span class="params">(TransactionDefinition definition, Object transaction, <span class="keyword">boolean</span> debugEnabled)</span> <span class="keyword">throws</span> TransactionException </span>&#123;</span><br><span class="line">    <span class="comment">// 如果当前已经存在事务, 且当前事务的传播属性设置为 PROPAGATION_NEVER（5）, 那么抛出异常    </span></span><br><span class="line">    <span class="keyword">if</span> (definition.getPropagationBehavior() == <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalTransactionStateException(<span class="string">"Existing transaction found for transaction marked with propagation 'never'"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            AbstractPlatformTransactionManager.SuspendedResourcesHolder suspendedResources;</span><br><span class="line">            <span class="keyword">boolean</span> newSynchronization;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果当前事务的配置属性是 PROPAGATION_NOT_SUPPORTED（4）, 同时当前线程已经存在事务了, 那么将事务挂起</span></span><br><span class="line">            <span class="keyword">if</span> (definition.getPropagationBehavior() == <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (debugEnabled) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.logger.debug(<span class="string">"Suspending current transaction"</span>);</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">// 将事务的挂起</span></span><br><span class="line">                suspendedResources = <span class="keyword">this</span>.suspend(transaction);</span><br><span class="line">                <span class="comment">// 是否开启一个新的事务同步器</span></span><br><span class="line">                newSynchronization = <span class="keyword">this</span>.getTransactionSynchronization() == <span class="number">0</span>;</span><br><span class="line">                <span class="comment">//// 意味着事务方法不需要放在事务环境中执行, 同时挂起事务的信息保存在 TransactionStatus 中, 用ThreadLocal来记录</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.prepareTransactionStatus(definition, (Object)<span class="keyword">null</span>, <span class="keyword">false</span>, newSynchronization, debugEnabled, suspendedResources);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (definition.getPropagationBehavior() == <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果当前事务的配置属性是 PROPAGATION_REQUIRES_NEW（3）, 创建新事务, 同时将当前线程存在的事务挂起, 与创建全新事务的过程类是, 区别在于在创建全新事务时不用考虑已有事务的挂起, 但在这里, 需要考虑已有事务的挂起</span></span><br><span class="line">                <span class="keyword">if</span> (debugEnabled) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.logger.debug(<span class="string">"Suspending current transaction, creating new transaction with name ["</span> + definition.getName() + <span class="string">"]"</span>);</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//挂起事务</span></span><br><span class="line">                suspendedResources = <span class="keyword">this</span>.suspend(transaction);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 是否开启一个新的事务同步器</span></span><br><span class="line">                    newSynchronization = <span class="keyword">this</span>.getTransactionSynchronization() != <span class="number">2</span>;</span><br><span class="line">                    <span class="comment">//  挂起事务的信息记录保存在 TransactionStatus 中,</span></span><br><span class="line">                    DefaultTransactionStatus status = <span class="keyword">this</span>.newTransactionStatus(definition, transaction, <span class="keyword">true</span>, newSynchronization, debugEnabled, suspendedResources);</span><br><span class="line">                    <span class="comment">// 构造 transaction, 包括设置 ConnectionHolder, 隔离级别, timeout, 如果是新连接, 绑定到当前线程</span></span><br><span class="line">                    <span class="keyword">this</span>.doBegin(transaction, definition);</span><br><span class="line">                    <span class="comment">// 新同步事务的设置, 针对当前线程的设置</span></span><br><span class="line">                    <span class="keyword">this</span>.prepareSynchronization(status, definition);</span><br><span class="line">                    <span class="keyword">return</span> status;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Error | RuntimeException var7) &#123;</span><br><span class="line">                    <span class="comment">// 抛出异常，恢复刚才挂起的事务</span></span><br><span class="line">                    <span class="keyword">this</span>.resumeAfterBeginException(transaction, suspendedResources, var7);</span><br><span class="line">                    <span class="keyword">throw</span> var7;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               </span><br><span class="line">                <span class="keyword">boolean</span> newSynchronization;</span><br><span class="line">                <span class="comment">// 如果当前事务的配置属性是 PROPAGATION_NOT_SUPPORTED（6）嵌套事务，创建 TransactionStatus, 创建保存点</span></span><br><span class="line">                <span class="keyword">if</span> (definition.getPropagationBehavior() == <span class="number">6</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!<span class="keyword">this</span>.isNestedTransactionAllowed()) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> NestedTransactionNotSupportedException(<span class="string">"Transaction manager does not allow nested transactions by default - specify 'nestedTransactionAllowed' property with value 'true'"</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (debugEnabled) &#123;</span><br><span class="line">                            <span class="keyword">this</span>.logger.debug(<span class="string">"Creating nested transaction with name ["</span> + definition.getName() + <span class="string">"]"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line"><span class="comment">// 如果没有可以使用保存点的方式控制事务回滚, 那么在嵌套式事务的建立初始建立保存点</span></span><br><span class="line">                        <span class="keyword">if</span> (<span class="keyword">this</span>.useSavepointForNestedTransaction()) &#123;</span><br><span class="line">                            <span class="comment">// 在 Spring 管理的事务中, 创建事务保存点</span></span><br><span class="line">                            DefaultTransactionStatus status = <span class="keyword">this</span>.prepareTransactionStatus(definition, transaction, <span class="keyword">false</span>, <span class="keyword">false</span>, debugEnabled, (Object)<span class="keyword">null</span>);</span><br><span class="line">                            status.createAndHoldSavepoint();</span><br><span class="line">                            <span class="keyword">return</span> status;</span><br><span class="line">                        &#125; <span class="keyword">else</span> </span><br><span class="line">                            <span class="comment">// 有些情况是不能使用保存点操作, 比如 JTA, 那么就建立新事务</span></span><br><span class="line">                            newSynchronization = <span class="keyword">this</span>.getTransactionSynchronization() != <span class="number">2</span>;</span><br><span class="line">                            DefaultTransactionStatus status = <span class="keyword">this</span>.newTransactionStatus(definition, transaction, <span class="keyword">true</span>, newSynchronization, debugEnabled, (Object)<span class="keyword">null</span>);</span><br><span class="line">                            <span class="keyword">this</span>.doBegin(transaction, definition);</span><br><span class="line">                            <span class="keyword">this</span>.prepareSynchronization(status, definition);</span><br><span class="line">                            <span class="keyword">return</span> status;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (debugEnabled) &#123;</span><br><span class="line">                        <span class="keyword">this</span>.logger.debug(<span class="string">"Participating in existing transaction"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"><span class="comment">// 对已经存在的事务的属性进行校验</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>.isValidateExistingTransaction()) &#123;</span><br><span class="line">                        <span class="comment">// 隔离级别的校验,TransactionDefinition 与 TransactionSynchronizationManager 中的值是否一致</span></span><br><span class="line">                        <span class="keyword">if</span> (definition.getIsolationLevel() != -<span class="number">1</span>) &#123;</span><br><span class="line">                            Integer currentIsolationLevel = TransactionSynchronizationManager.getCurrentTransactionIsolationLevel();</span><br><span class="line">                            <span class="keyword">if</span> (currentIsolationLevel == <span class="keyword">null</span> || currentIsolationLevel != definition.getIsolationLevel()) &#123;</span><br><span class="line">                                Constants isoConstants = DefaultTransactionDefinition.constants;</span><br><span class="line">                                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalTransactionStateException(<span class="string">"Participating transaction with definition ["</span> + definition + <span class="string">"] specifies isolation level which is incompatible with existing transaction: "</span> + (currentIsolationLevel != <span class="keyword">null</span> ? isoConstants.toCode(currentIsolationLevel, <span class="string">"ISOLATION_"</span>) : <span class="string">"(unknown)"</span>));</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"><span class="comment">// readOnly 的校验 </span></span><br><span class="line">                        <span class="keyword">if</span> (!definition.isReadOnly() &amp;&amp; TransactionSynchronizationManager.isCurrentTransactionReadOnly()) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalTransactionStateException(<span class="string">"Participating transaction with definition ["</span> + definition + <span class="string">"] is not marked as read-only but existing transaction is"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    newSynchronization = <span class="keyword">this</span>.getTransactionSynchronization() != <span class="number">2</span>;</span><br><span class="line">                   <span class="comment">// 返回 TransactionStatus 注意第三个参数 false 表示 当前事务没有使用新事务</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>.prepareTransactionStatus(definition, transaction, <span class="keyword">false</span>, newSynchronization, debugEnabled, (Object)<span class="keyword">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>提交事务方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processCommit</span><span class="params">(DefaultTransactionStatus status)</span> <span class="keyword">throws</span> TransactionException </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">boolean</span> beforeCompletionInvoked = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">boolean</span> unexpectedRollback = <span class="keyword">false</span>;</span><br><span class="line">               <span class="keyword">this</span>.prepareForCommit(status);</span><br><span class="line">               <span class="keyword">this</span>.triggerBeforeCommit(status);</span><br><span class="line">               <span class="keyword">this</span>.triggerBeforeCompletion(status);</span><br><span class="line">               beforeCompletionInvoked = <span class="keyword">true</span>;</span><br><span class="line">               </span><br><span class="line">               <span class="comment">// 如果有保存点（嵌套事务），清除保存点信息</span></span><br><span class="line">               <span class="keyword">if</span> (status.hasSavepoint()) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (status.isDebug()) &#123;</span><br><span class="line">                       <span class="keyword">this</span>.logger.debug(<span class="string">"Releasing transaction savepoint"</span>);</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   unexpectedRollback = status.isGlobalRollbackOnly();</span><br><span class="line">                   <span class="comment">//清除保存点信息</span></span><br><span class="line">                   status.releaseHeldSavepoint();</span><br><span class="line">               &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status.isNewTransaction()) &#123;</span><br><span class="line">                   <span class="comment">// 若是新事务, 则直接提交</span></span><br><span class="line">                   <span class="keyword">if</span> (status.isDebug()) &#123;</span><br><span class="line">                       <span class="keyword">this</span>.logger.debug(<span class="string">"Initiating transaction commit"</span>);</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   unexpectedRollback = status.isGlobalRollbackOnly();</span><br><span class="line">                   <span class="comment">//提交</span></span><br><span class="line">                   <span class="keyword">this</span>.doCommit(status);</span><br><span class="line">               &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.isFailEarlyOnGlobalRollbackOnly()) &#123;</span><br><span class="line">                   unexpectedRollback = status.isGlobalRollbackOnly();</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span> (unexpectedRollback) &#123;</span><br><span class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> UnexpectedRollbackException(<span class="string">"Transaction silently rolled back because it has been marked as rollback-only"</span>);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (UnexpectedRollbackException var17) &#123;</span><br><span class="line">               <span class="keyword">this</span>.triggerAfterCompletion(status, <span class="number">1</span>);</span><br><span class="line">               <span class="keyword">throw</span> var17;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (TransactionException var18) &#123;</span><br><span class="line">               <span class="keyword">if</span> (<span class="keyword">this</span>.isRollbackOnCommitFailure()) &#123;</span><br><span class="line">                   <span class="comment">//回滚</span></span><br><span class="line">                   <span class="keyword">this</span>.doRollbackOnCommitException(status, var18);</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="keyword">this</span>.triggerAfterCompletion(status, <span class="number">2</span>);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">throw</span> var18;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (Error | RuntimeException var19) &#123;</span><br><span class="line">               <span class="keyword">if</span> (!beforeCompletionInvoked) &#123;</span><br><span class="line">                   <span class="keyword">this</span>.triggerBeforeCompletion(status);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">this</span>.doRollbackOnCommitException(status, var19);</span><br><span class="line">               <span class="keyword">throw</span> var19;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">this</span>.triggerAfterCommit(status);</span><br><span class="line">           &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">               <span class="keyword">this</span>.triggerAfterCompletion(status, <span class="number">0</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">this</span>.cleanupAfterCompletion(status);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="8-spring事务管理模板方法"><a href="#8-spring事务管理模板方法" class="headerlink" title="8.spring事务管理模板方法"></a>8.spring事务管理模板方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模板方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionTemplate</span> <span class="keyword">extends</span> <span class="title">DefaultTransactionDefinition</span> <span class="keyword">implements</span> <span class="title">TransactionOperations</span>, <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">       <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">execute</span><span class="params">(TransactionCallback&lt;T&gt; action)</span> <span class="keyword">throws</span> TransactionException </span>&#123;</span><br><span class="line">        Assert.state(<span class="keyword">this</span>.transactionManager != <span class="keyword">null</span>, <span class="string">"No PlatformTransactionManager set"</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.transactionManager <span class="keyword">instanceof</span> CallbackPreferringPlatformTransactionManager) &#123;</span><br><span class="line">            <span class="keyword">return</span> ((CallbackPreferringPlatformTransactionManager)<span class="keyword">this</span>.transactionManager).execute(<span class="keyword">this</span>, action);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//1.获取事务状态</span></span><br><span class="line">            TransactionStatus status = <span class="keyword">this</span>.transactionManager.getTransaction(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">            Object result;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                 <span class="comment">// 2.执行业务逻辑</span></span><br><span class="line">                result = action.doInTransaction(status);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Error | RuntimeException var5) &#123;</span><br><span class="line">                <span class="comment">////事务回滚</span></span><br><span class="line">                <span class="keyword">this</span>.rollbackOnException(status, var5);</span><br><span class="line">                <span class="keyword">throw</span> var5;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable var6) &#123;</span><br><span class="line">                <span class="comment">//事务回滚</span></span><br><span class="line">                <span class="keyword">this</span>.rollbackOnException(status, var6);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var6, <span class="string">"TransactionCallback threw undeclared checked exception"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//事务提交</span></span><br><span class="line">            <span class="keyword">this</span>.transactionManager.commit(status);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><blockquote><p><a href="https://www.javazhiyin.com/35501.html" target="_blank" rel="noopener">https://www.javazhiyin.com/35501.html</a></p><p><a href="https://www.jianshu.com/p/1bfa61868823" target="_blank" rel="noopener">https://www.jianshu.com/p/1bfa61868823</a></p><p><a href="https://www.cnblogs.com/dennyzhangdd/p/9602673.html" target="_blank" rel="noopener">https://www.cnblogs.com/dennyzhangdd/p/9602673.html</a></p></blockquote></contents>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记两年工作总结</title>
      <link href="/2018/07/22/%E8%AE%B0%E4%B8%A4%E5%B9%B4%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
      <url>/2018/07/22/%E8%AE%B0%E4%B8%A4%E5%B9%B4%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<contents><h3 id="工作两年随笔"><a href="#工作两年随笔" class="headerlink" title="工作两年随笔"></a>工作两年随笔</h3><h4 id="春来秋去-又过去一年了-记两年来工作思考"><a href="#春来秋去-又过去一年了-记两年来工作思考" class="headerlink" title="春来秋去,又过去一年了-记两年来工作思考"></a>春来秋去,又过去一年了-记两年来工作思考</h4><blockquote><p>1.技术发展</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">调岗至本部门,同时这个项目也继续做了一年了,技术也提升了不少</span><br></pre></td></tr></table></figure><ul><li>Spring框架的熟悉</li><li>Spring Aop的无侵入式日志</li><li>Shiro的权限控制</li><li>memcache的使用</li><li>Quartz定时任务的调度功能</li><li>Apache POI(java api)读写excel</li><li>highcharts 在线导出图片</li><li>Mysql如何设计表结构,字段类型,索引,排查慢sql原因等等</li><li>前端框架的熟悉,了解如何去排查问题和修复</li></ul><blockquote><p>2.技术提升</p></blockquote><ul><li>学习源码</li><li>学习大数据底层相关知识</li><li>学习机器学习</li><li>学习一点前端</li></ul><blockquote><p>3.我的生活</p></blockquote><ul><li>书倒是买了好几本,有的到现在包装都没拆…</li><li>打球打的比较少了,真的自己是变懒了</li><li>618也买了人生第一台单反了,就准备国庆去新疆拍好看的照片了</li></ul><blockquote><p>4.未来计划</p></blockquote><ul><li>看书</li><li>打球</li></ul></contents>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书笔记-疯狂Java</title>
      <link href="/2018/06/22/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E7%96%AF%E7%8B%82Java/"/>
      <url>/2018/06/22/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E7%96%AF%E7%8B%82Java/</url>
      
        <content type="html"><![CDATA[<contents><h1 id="读书笔记-疯狂Java：突破程序员基本功的16课"><a href="#读书笔记-疯狂Java：突破程序员基本功的16课" class="headerlink" title="读书笔记-疯狂Java：突破程序员基本功的16课"></a>读书笔记-疯狂Java：突破程序员基本功的16课</h1><h2 id="数组与内存控制"><a href="#数组与内存控制" class="headerlink" title="数组与内存控制"></a>数组与内存控制</h2><h3 id="数组的初始化"><a href="#数组的初始化" class="headerlink" title="数组的初始化"></a>数组的初始化</h3><blockquote><p>所谓的数组初始化：就是为数组对象的元素分配内存空间,并为每个元素制定初始值，</p></blockquote><h4 id="数组的初始化方式"><a href="#数组的初始化方式" class="headerlink" title="数组的初始化方式"></a>数组的初始化方式</h4><ol><li>静态初始化</li></ol><ul><li>初始化时不指定数组长度，显式的指定每个元素的初始值。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//静态初始化</span><br><span class="line">int arr[]=&#123;1,2,3&#125;;</span><br><span class="line"></span><br><span class="line">int arr2[]=new int[]&#123;1,2,3&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>动态初始化</li></ol><ul><li>初始化时只指定数组长度，由系统为数组元素分配初始值。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//动态初始化</span><br><span class="line">int arr[]=new int[3];</span><br></pre></td></tr></table></figure><blockquote><p>无论采用哪种方式,初始化完成后,数组的长度就不会发生改变。</p></blockquote><blockquote><p>所有局部变量都是放在栈内存里保存的。不管是基本类型的变量，还是引用类型的变量，都存储在各自的方法栈区。单引用类型变量所引用的对象（数组，普通java对象）存在堆内存中。</p></blockquote><h3 id="对象与内存控制"><a href="#对象与内存控制" class="headerlink" title="对象与内存控制"></a>对象与内存控制</h3><blockquote><p>java内存管理：内存分配和回收。java依然存在内存泄漏</p></blockquote><h4 id="实例变量和类变量"><a href="#实例变量和类变量" class="headerlink" title="实例变量和类变量"></a>实例变量和类变量</h4><ol><li>成员变量<blockquote><p>类体内定义的变量成为成员变量（Field）</p></blockquote></li></ol><ul><li>实例变量（非静态变量）:没有用static 修饰</li><li>类变量（静态变量）：用static 修饰</li></ul><ol start="2"><li>局部变量<blockquote><p>局部变量的作用时间短，存储在方法的/<em>栈内存</em>/中。</p></blockquote></li></ol><ul><li>形参:随方法的结束而消亡</li><li>方法内的局部变量：随方法的结束而消亡</li><li>代码块的局部变量：从初始化完成开始生效，随代码快的结束而消亡</li></ul><h5 id="实例变量和类变量的属性"><a href="#实例变量和类变量的属性" class="headerlink" title="实例变量和类变量的属性"></a>实例变量和类变量的属性</h5><ul><li>同一个jvm中每个类只能对应一个Class对象，因此，同应该jvm内的一个类的类变量只需一块内存空间。</li><li>对于实例变量而言，该类每创建一个实例，就需要为该实例变量分配一块内存空间。</li></ul><h5 id="实例变量的初始化时机"><a href="#实例变量的初始化时机" class="headerlink" title="实例变量的初始化时机"></a>实例变量的初始化时机</h5><ol><li>定义实例变量时指定初始值</li><li>非静态初始化块中对实例变量指定初始值</li><li>构造器对实例变量指定初始值</li></ol><blockquote><p>其中执行顺序为（1，2）在3 之前。（1，2）的执行顺序与源程序的排列顺序相同。</p></blockquote><h5 id="类变量的初始化时机"><a href="#类变量的初始化时机" class="headerlink" title="类变量的初始化时机"></a>类变量的初始化时机</h5><blockquote><p>实例变量属性类本身，当初始化该类的时候才会对该类变量分配内存空间,并执行初始化。</p></blockquote><ol><li>定义类变量时指定初始值。</li><li>静态初始块中对类变量指定初始值</li></ol><blockquote><p>执行顺序与源程序的排列顺序相同</p></blockquote><h4 id="父类构造器"><a href="#父类构造器" class="headerlink" title="父类构造器"></a>父类构造器</h4><ul><li>创建对象时候程序调用顺序</li></ul><ol><li>父类非静态初始块</li><li>父类构造器</li><li>本类非静态初始块</li><li>本类构造器</li></ol><h3 id="java集合"><a href="#java集合" class="headerlink" title="java集合"></a>java集合</h3><h4 id="set和Map"><a href="#set和Map" class="headerlink" title="set和Map"></a>set和Map</h4><h5 id="HashMap-HashSet"><a href="#HashMap-HashSet" class="headerlink" title="HashMap HashSet"></a>HashMap HashSet</h5><h5 id="TreeMap-TreeSet"><a href="#TreeMap-TreeSet" class="headerlink" title="TreeMap TreeSet"></a>TreeMap TreeSet</h5><h3 id="java内存回收"><a href="#java内存回收" class="headerlink" title="java内存回收"></a>java内存回收</h3><h4 id="java引用的种类"><a href="#java引用的种类" class="headerlink" title="java引用的种类"></a>java引用的种类</h4></contents>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书笔记-大型网站技术架构</title>
      <link href="/2018/05/22/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/"/>
      <url>/2018/05/22/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<contents><h1 id="读书笔记-读书笔记-大型网站技术架构"><a href="#读书笔记-读书笔记-大型网站技术架构" class="headerlink" title="读书笔记-读书笔记-大型网站技术架构"></a>读书笔记-读书笔记-大型网站技术架构</h1><ul><li>大型网站技术架构：核心原理与案例分析+李智慧</li></ul><h2 id="大型网络架构的演化"><a href="#大型网络架构的演化" class="headerlink" title="大型网络架构的演化"></a>大型网络架构的演化</h2><ol><li>演变过程</li></ol><ul><li>单一服务器 -&gt; 集群：处理高并发</li><li>web服务器,数据库服务器，文件服务器分离:提升性能</li><li>增加缓存：</li><li>数据库主从配置,读写分离：</li><li>使用cdn 和nginx反向代理：加速网站访问速度</li><li>使用分布式数据库，分布式文件系统，nosql等</li><li>业务层面的拆分</li></ul><p>2.网站架构</p><ul><li>分层：应用层，服务层，数据层</li></ul><p>3.性能优化</p><ul><li><p>浏览器端:</p><ul><li>浏览器缓存</li><li>页面压缩</li><li>合理的布局</li><li>cdn</li></ul></li><li><p>web前端：</p><ul><li>减少http请求</li><li>使用浏览器缓存</li><li>启用文件压缩</li><li>减少cookie传输(静态资源单独域名,不传输cookie)</li><li>使用cdn</li></ul></li><li><p>服务器端：</p><ul><li>服务器本地缓存,分布式缓存</li><li>异步操作</li><li>集群</li><li>负载均衡<ul><li>HTTP 重定向负载均衡</li><li>DNS 负载均衡</li><li>反向代理负载均衡</li><li>IP负载均衡</li><li>数据链路层负载均衡</li><li></li></ul></li></ul></li><li><p>数据库层面</p><ul><li>优化sql查询</li><li>使用nosql</li></ul></li></ul></contents>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 系统架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shiro权限控制</title>
      <link href="/2018/05/22/shiro%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/"/>
      <url>/2018/05/22/shiro%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<contents><h2 id="shiro-权限控制"><a href="#shiro-权限控制" class="headerlink" title="shiro 权限控制"></a>shiro 权限控制</h2><h3 id="1-增加jar包"><a href="#1-增加jar包" class="headerlink" title="1.增加jar包"></a>1.增加jar包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!--shiro start --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;shiro-core&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;shiro.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;shiro-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;shiro.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;shiro-ehcache&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;shiro.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;shiro.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!--shiro end --&gt;</span><br></pre></td></tr></table></figure><h3 id="2-配置xml"><a href="#2-配置xml" class="headerlink" title="2.配置xml"></a>2.配置xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd&quot;</span><br><span class="line">    default-lazy-init=&quot;false&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;description&gt;Shiro安全配置&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;sessionDAO&quot;</span><br><span class="line">        class=&quot;org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO&quot; /&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;bean id=&quot;sessionIdCookie&quot; class=&quot;org.apache.shiro.web.servlet.SimpleCookie&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;name&quot; value=&quot;xxxxxx&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;path&quot; value=&quot;/&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;bean id=&quot;shiroSessionManager&quot;</span><br><span class="line">        class=&quot;org.apache.shiro.web.session.mgt.DefaultWebSessionManager&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;sessionDAO&quot; ref=&quot;sessionDAO&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;sessionValidationInterval&quot; value=&quot;1800000&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;globalSessionTimeout&quot; value=&quot;1800000&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;sessionIdUrlRewritingEnabled&quot; value=&quot;false&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;sessionIdCookieEnabled&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;sessionIdCookie&quot; ref=&quot;sessionIdCookie&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    &lt;!-- Shiro&apos;s main business-tier object for web-enabled applications --&gt;</span><br><span class="line">    &lt;bean id=&quot;securityManager&quot; class=&quot;org.apache.shiro.web.mgt.DefaultWebSecurityManager&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;cacheManager&quot; ref=&quot;shiroCacheManager&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;sessionManager&quot; ref=&quot;shiroSessionManager&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;realms&quot;&gt;</span><br><span class="line">            &lt;list&gt;</span><br><span class="line">                &lt;ref local=&quot;shiroHttpRealm&quot; /&gt;</span><br><span class="line">            &lt;/list&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 编写域 --&gt;</span><br><span class="line">    &lt;bean id=&quot;shiroHttpRealm&quot; class=&quot;xxx.xx.ShiroHttpRealm&quot;&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Shiro Filter --&gt;</span><br><span class="line">    &lt;bean id=&quot;roleOrFilter&quot;</span><br><span class="line">        class=&quot;xxx.CustomRolesAuthorizationFilter&quot; /&gt;</span><br><span class="line">    &lt;bean id=&quot;updateCurrentInfoFilter&quot; </span><br><span class="line">        class=&quot;xxx.ModuleAuthorizationFilter&quot; /&gt;</span><br><span class="line">    &lt;bean id=&quot;validateFilter&quot; </span><br><span class="line">        class=&quot;xxx.ValidateURLFilter&quot; /&gt;</span><br><span class="line">    &lt;bean id=&quot;productFilter&quot; </span><br><span class="line">        class=&quot;xxx.ProductAuthFilter&quot; /&gt;</span><br><span class="line">    &lt;bean id=&quot;permissionInfoFilter&quot; </span><br><span class="line">        class=&quot;xxx.PermissionInfoFilter&quot; /&gt;</span><br><span class="line">        </span><br><span class="line">    &lt;bean id=&quot;shiroFilter&quot; class=&quot;org.apache.shiro.spring.web.ShiroFilterFactoryBean&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;securityManager&quot; ref=&quot;securityManager&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;loginUrl&quot; value=&quot;$&#123;APP_URL&#125;/login&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;successUrl&quot; value=&quot;/index&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;unauthorizedUrl&quot; value=&quot;/unauthorized&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;filters&quot;&gt;</span><br><span class="line">            &lt;map&gt;</span><br><span class="line">                &lt;entry key=&quot;roles&quot; value-ref=&quot;roleOrFilter&quot; /&gt;</span><br><span class="line">                &lt;entry key=&quot;current&quot; value-ref=&quot;updateCurrentInfoFilter&quot; /&gt;</span><br><span class="line">                &lt;entry key=&quot;validate&quot; value-ref=&quot;validateFilter&quot; /&gt;</span><br><span class="line">                &lt;entry key=&quot;productAuth&quot; value-ref=&quot;productFilter&quot; /&gt;</span><br><span class="line">                &lt;entry key=&quot;permissionInfo&quot; value-ref=&quot;permissionInfoFilter&quot; /&gt;</span><br><span class="line">            &lt;/map&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 从上到下，从左往右验证--&gt;</span><br><span class="line">        &lt;property name=&quot;filterChainDefinitions&quot;&gt;</span><br><span class="line">            &lt;value&gt;</span><br><span class="line">                &lt;!-- anon 任何用户发送的请求都能够访问--&gt;</span><br><span class="line">                /unauthorized = anon</span><br><span class="line">                /assets/** = anon</span><br><span class="line">                /login/** = anon</span><br><span class="line"></span><br><span class="line">                 &lt;!-- user 用户是身份验证通过或RememberMe 登录--&gt;</span><br><span class="line">                /feedback/** = user</span><br><span class="line">               </span><br><span class="line">                 &lt;!-- authc 登录成功才能够访问--&gt;</span><br><span class="line">                /common/**=authc</span><br><span class="line">               </span><br><span class="line">               &lt;!-- 具有1,2,3角色,通过productAuth,validate,permissionInfo过滤器验证--&gt;</span><br><span class="line">                /**/edit**=roles[1,2,3],productAuth,validate,permissionInfo</span><br><span class="line">                </span><br><span class="line">             &lt;!-- 具有1角色,通过permissionInfo过滤器验证--&gt;</span><br><span class="line">                /adminSettings/**=roles[1],permissionInfo</span><br><span class="line">                </span><br><span class="line">                /index/**=authc</span><br><span class="line">                /** = authc</span><br><span class="line">                </span><br><span class="line">            &lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!-- 保证实现了Shiro内部lifecycle函数的bean执行 --&gt;</span><br><span class="line">    &lt;bean id=&quot;lifecycleBeanPostProcessor&quot; class=&quot;org.apache.shiro.spring.LifecycleBeanPostProcessor&quot; /&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h3 id="3-编写shiro域"><a href="#3-编写shiro域" class="headerlink" title="3.编写shiro域"></a>3.编写shiro域</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class ShiroHttpRealm extends AuthorizingRealm &#123;</span><br><span class="line">    </span><br><span class="line">    //判断用户是否正常，正常登录返回该用户信息</span><br><span class="line">    @Override</span><br><span class="line">    protected AuthorizationInfo doGetAuthorizationInfo( PrincipalCollection principals ) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //加载该用户权限信息，方便后面做判断</span><br><span class="line">    @Override</span><br><span class="line">    protected AuthenticationInfo doGetAuthenticationInfo( AuthenticationToken token ) throws AuthenticationException &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></contents>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdbc原生api批量插入数据库</title>
      <link href="/2018/04/22/jdbc%E5%8E%9F%E7%94%9Fapi%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2018/04/22/jdbc%E5%8E%9F%E7%94%9Fapi%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<contents><h2 id="jdbc原生api批量插入数据库"><a href="#jdbc原生api批量插入数据库" class="headerlink" title="jdbc原生api批量插入数据库"></a>jdbc原生api批量插入数据库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">public int[] batchInsertOrUpdate( final List&lt;InsertEntity&gt; InsertEntiyList )&#123;</span><br><span class="line">    StringBuilder stringBuilder = new StringBuilder();</span><br><span class="line">    //写sql</span><br><span class="line">    stringBuilder.append( &quot; insert into XXX &quot; )</span><br><span class="line">                .append( &quot;( xx,xx,xx,xx....&quot; )</span><br><span class="line">                .append( &quot; values (&quot; )</span><br><span class="line">                .append( &quot; ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)&quot; )</span><br><span class="line">                .append( &quot; on duplicate key update &quot; )</span><br><span class="line">                .append( &quot; xx =?, x=?&quot; );</span><br><span class="line">    String sql = stringBuilder.toString();</span><br><span class="line">    int[] updateCounts = jdbcTemplate.batchUpdate( sql, new BatchPreparedStatementSetter() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void setValues( PreparedStatement ps, int i ) throws SQLException &#123;</span><br><span class="line">                InsertEntity insertEntity = InsertEntiyList.get( i );</span><br><span class="line">                ps.setString( 1, xxx);</span><br><span class="line">                ps.setTimestamp( 2, new java.sql.Timestamp( costDetail.getDate().getTime() ) );</span><br><span class="line">                //省略其他</span><br><span class="line">            &#125;</span><br><span class="line">            @Override</span><br><span class="line">            public int getBatchSize() &#123;</span><br><span class="line">                return InsertEntiyList.size();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; );    </span><br><span class="line">        return updateCounts;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></contents>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>序列化拷贝对象</title>
      <link href="/2018/03/22/%E5%BA%8F%E5%88%97%E5%8C%96%E6%8B%B7%E8%B4%9D%E5%AF%B9%E8%B1%A1/"/>
      <url>/2018/03/22/%E5%BA%8F%E5%88%97%E5%8C%96%E6%8B%B7%E8%B4%9D%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<contents><h2 id="java-序列化拷贝对象"><a href="#java-序列化拷贝对象" class="headerlink" title="java 序列化拷贝对象"></a>java 序列化拷贝对象</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@SuppressWarnings( &quot;unchecked&quot; )</span><br><span class="line">private static &lt;T extends Serializable&gt; T deepClone( T obj ) &#123;</span><br><span class="line">    T cloneObj = null;</span><br><span class="line">    try &#123;</span><br><span class="line">        // 写入字节流</span><br><span class="line">        ByteArrayOutputStream out = new ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream obs = new ObjectOutputStream( out );</span><br><span class="line">        obs.writeObject( obj );</span><br><span class="line">        obs.close();</span><br><span class="line"></span><br><span class="line">        // 分配内存，写入原始对象，生成新对象</span><br><span class="line">        ByteArrayInputStream ios = new ByteArrayInputStream( out.toByteArray() );</span><br><span class="line">        ObjectInputStream ois = new ObjectInputStream( ios );</span><br><span class="line">        // 返回生成的新对象</span><br><span class="line">        cloneObj = (T)ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">    catch( Exception e ) &#123;</span><br><span class="line">        logger.error( e.getMessage() );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return cloneObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></contents>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring+memcache缓存注解配置</title>
      <link href="/2018/01/22/spring-memcache%E7%BC%93%E5%AD%98%E6%B3%A8%E8%A7%A3%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/01/22/spring-memcache%E7%BC%93%E5%AD%98%E6%B3%A8%E8%A7%A3%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<contents><h2 id="spring-memcache配置缓存注解-cahceable等"><a href="#spring-memcache配置缓存注解-cahceable等" class="headerlink" title="spring+memcache配置缓存注解@cahceable等"></a>spring+memcache配置缓存注解@cahceable等</h2><h4 id="1-增加memcache-pom文件"><a href="#1-增加memcache-pom文件" class="headerlink" title="1.增加memcache pom文件"></a>1.增加memcache pom文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.googlecode.xmemcached&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;xmemcached&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="1-配置memcache-xml"><a href="#1-配置memcache-xml" class="headerlink" title="1.配置memcache xml"></a>1.配置memcache xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- xmemcached 配置 --&gt;</span><br><span class="line">        &lt;bean name=&quot;memcachedClient&quot;</span><br><span class="line">            class=&quot;net.rubyeye.xmemcached.utils.XMemcachedClientFactoryBean&quot;</span><br><span class="line">            destroy-method=&quot;shutdown&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;servers&quot;&gt;</span><br><span class="line">                &lt;!-- ip地址 端口号--&gt;</span><br><span class="line">                &lt;value&gt;127.0.0.1:11211&lt;/value&gt;</span><br><span class="line">            &lt;/property&gt;</span><br><span class="line">            &lt;!-- server&apos;s weights --&gt;</span><br><span class="line">            &lt;property name=&quot;weights&quot;&gt;</span><br><span class="line">                &lt;list&gt;</span><br><span class="line">                    &lt;value&gt;1&lt;/value&gt;</span><br><span class="line">                &lt;/list&gt;</span><br><span class="line">            &lt;/property&gt;</span><br><span class="line">            &lt;!-- nio connection pool size --&gt;</span><br><span class="line">            &lt;property name=&quot;connectionPoolSize&quot; value=&quot;2&quot;&gt;&lt;/property&gt;</span><br><span class="line">            &lt;!-- Use binary protocol,default is TextCommandFactory --&gt;</span><br><span class="line">            &lt;property name=&quot;commandFactory&quot;&gt;</span><br><span class="line">                &lt;bean class=&quot;net.rubyeye.xmemcached.command.BinaryCommandFactory&quot;&gt;&lt;/bean&gt;</span><br><span class="line">            &lt;/property&gt;</span><br><span class="line">            &lt;!-- Distributed strategy --&gt;</span><br><span class="line">            &lt;property name=&quot;sessionLocator&quot;&gt;</span><br><span class="line">                &lt;bean class=&quot;net.rubyeye.xmemcached.impl.KetamaMemcachedSessionLocator&quot;&gt;&lt;/bean&gt;</span><br><span class="line">            &lt;/property&gt;</span><br><span class="line">            &lt;!-- Serializing transcoder --&gt;</span><br><span class="line">            &lt;property name=&quot;transcoder&quot;&gt;</span><br><span class="line">                &lt;bean class=&quot;net.rubyeye.xmemcached.transcoders.SerializingTranscoder&quot; /&gt;</span><br><span class="line">            &lt;/property&gt;</span><br><span class="line">            &lt;!-- ByteBuffer allocator --&gt;</span><br><span class="line">            &lt;property name=&quot;bufferAllocator&quot;&gt;</span><br><span class="line">                &lt;bean class=&quot;net.rubyeye.xmemcached.buffer.SimpleBufferAllocator&quot;&gt;&lt;/bean&gt;</span><br><span class="line">            &lt;/property&gt;</span><br><span class="line">            &lt;!-- Failure mode --&gt;</span><br><span class="line">            &lt;property name=&quot;failureMode&quot; value=&quot;false&quot; /&gt;</span><br><span class="line">        &lt;/bean&gt;</span><br></pre></td></tr></table></figure><h3 id="3-增加cache-命名空间"><a href="#3-增加cache-命名空间" class="headerlink" title="3.增加cache 命名空间"></a>3.增加cache 命名空间</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;&gt;</span><br><span class="line">    xmlns:cache=&quot;http://www.springframework.org/schema/cache&quot;</span><br><span class="line"></span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/cache</span><br><span class="line">http://www.springframework.org/schema/cache/spring-cache-3.1.xsd&quot;</span><br><span class="line">&gt;</span><br><span class="line">    //省略... </span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h3 id="4-编写MemcachedCache管理类"><a href="#4-编写MemcachedCache管理类" class="headerlink" title="4.编写MemcachedCache管理类"></a>4.编写MemcachedCache管理类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">package com.xxx.cache;</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.cache.Cache;</span><br><span class="line">import org.springframework.cache.support.SimpleValueWrapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import net.rubyeye.xmemcached.MemcachedClient;</span><br><span class="line">import net.rubyeye.xmemcached.exception.MemcachedException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class MemcachedCache implements Cache &#123;</span><br><span class="line">    </span><br><span class="line">    //这里要注入该项目的缓存</span><br><span class="line">    @Autowired</span><br><span class="line">    private MemcachedClient memcachedClient;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    public MemcachedCache() &#123;</span><br><span class="line">          </span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    public MemcachedCache(String name, MemcachedClient memcachedClient) &#123;</span><br><span class="line">        this.memcachedClient = memcachedClient;</span><br><span class="line">        this.name = name;  </span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return this.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Object getNativeCache() &#123;</span><br><span class="line">        return this.memcachedClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public ValueWrapper get( Object key ) &#123;</span><br><span class="line">        Object value = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            value = this.memcachedClient.get( objectToString( key ) );</span><br><span class="line">        &#125;</span><br><span class="line">        catch( TimeoutException | InterruptedException | MemcachedException e ) &#123;</span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return (value != null ? new SimpleValueWrapper( value ) : null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void put( Object key, Object value ) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            this.memcachedClient.set( objectToString( key ), 3600, value );</span><br><span class="line">        &#125;</span><br><span class="line">        catch( TimeoutException | InterruptedException | MemcachedException e ) &#123;</span><br><span class="line"></span><br><span class="line">           e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void evict( Object key ) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            this.memcachedClient.delete( objectToString( key ) );</span><br><span class="line">        &#125;</span><br><span class="line">        catch( TimeoutException | InterruptedException | MemcachedException e ) &#123;</span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void clear() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static String objectToString( Object object ) &#123;</span><br><span class="line">        if( object == null ) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        else if( object instanceof String ) &#123;</span><br><span class="line">            return (String)object;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            return object.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void setName( String name ) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-配置CacheManager"><a href="#5-配置CacheManager" class="headerlink" title="5.配置CacheManager"></a>5.配置CacheManager</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 启动缓存注解功能 --&gt;</span><br><span class="line">&lt;cache:annotation-driven/&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id=&quot;cacheManager&quot; class=&quot;org.springframework.cache.support.SimpleCacheManager&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;caches&quot;&gt;</span><br><span class="line">        &lt;set&gt;</span><br><span class="line">            &lt;bean class=&quot;com.xxx.cache.MemcachedCache&quot; p:name=&quot;xxxx&quot;/&gt;</span><br><span class="line">        &lt;/set&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h4 id="6-启用注解"><a href="#6-启用注解" class="headerlink" title="6.启用注解"></a>6.启用注解</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Cacheable( value = &quot;xxxx&quot;, key = &quot;#name&quot; )</span><br><span class="line">public String getName( String name ) &#123;</span><br><span class="line">    System.err.println( &quot;执行该方法:&quot; + new Date() );</span><br><span class="line">    //do something</span><br><span class="line">    return name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></contents>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
            <tag> memcahce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java数字转换</title>
      <link href="/2017/07/16/java%E6%95%B0%E5%AD%97%E8%BD%AC%E6%8D%A2/"/>
      <url>/2017/07/16/java%E6%95%B0%E5%AD%97%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<contents><h1 id="java数字转换"><a href="#java数字转换" class="headerlink" title="java数字转换"></a>java数字转换</h1><h2 id="将小数输出成-形式"><a href="#将小数输出成-形式" class="headerlink" title="将小数输出成%形式"></a>将小数输出成%形式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">double result = 0.51111122111111;</span><br><span class="line">DecimalFormat df = new DecimalFormat( &quot;0.00%&quot; );</span><br><span class="line">String str = df.format( result );</span><br><span class="line">System.out.println( str );</span><br><span class="line">NumberFormat nf = NumberFormat.getPercentInstance();</span><br><span class="line">nf.setMinimumFractionDigits(2);// 最小小数位数</span><br><span class="line">System.out.println(nf.format(0.47));</span><br></pre></td></tr></table></figure><h2 id="百分数转换为小数"><a href="#百分数转换为小数" class="headerlink" title="百分数转换为小数"></a>百分数转换为小数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">String str = &quot;34.2%&quot;;</span><br><span class="line">NumberFormat nf = NumberFormat.getPercentInstance();</span><br><span class="line">Number number=nf.parse( str );</span><br><span class="line">System.out.println(number );</span><br></pre></td></tr></table></figure><h2 id="保留两位小数"><a href="#保留两位小数" class="headerlink" title="保留两位小数"></a>保留两位小数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># java</span><br><span class="line">private double transforDecimal( double d ) &#123;</span><br><span class="line">        BigDecimal bg = new BigDecimal( d );</span><br><span class="line">        double f1 = bg.setScale( 2, BigDecimal.ROUND_HALF_UP ).doubleValue();</span><br><span class="line">        return f1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"># sql</span><br><span class="line">Round(a,2)</span><br></pre></td></tr></table></figure></contents>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一年工作之感悟</title>
      <link href="/2017/07/16/%E4%B8%80%E5%B9%B4%E5%B7%A5%E4%BD%9C%E4%B9%8B%E6%84%9F%E6%82%9F/"/>
      <url>/2017/07/16/%E4%B8%80%E5%B9%B4%E5%B7%A5%E4%BD%9C%E4%B9%8B%E6%84%9F%E6%82%9F/</url>
      
        <content type="html"><![CDATA[<contents><h1 id="一年工作之感悟"><a href="#一年工作之感悟" class="headerlink" title="一年工作之感悟"></a>一年工作之感悟</h1><h2 id="一年了"><a href="#一年了" class="headerlink" title="一年了"></a>一年了</h2><ul><li>不知不觉中，已经毕业一年了。</li><li>在每天的早出晚归中，每天很怀念大学的生活，想念那些老同学，老朋友。想念一起打球的时光。但是，工作还是得好好工作，还是得学习。</li><li>工作一年了，已经忘了通信的知识，现都在和计算机专业的抢饭碗了。说到计算机，还好自己在大学最后一段时间恶补了一些。</li></ul><h2 id="对于职场的感悟"><a href="#对于职场的感悟" class="headerlink" title="对于职场的感悟"></a>对于职场的感悟</h2><ul><li>永远不要去承担不应该是你的责任。</li><li>祸从口入。该说的时候要说，不该说的时候不要说</li></ul><h2 id="对于技术的感悟"><a href="#对于技术的感悟" class="headerlink" title="对于技术的感悟"></a>对于技术的感悟</h2><ul><li>对于程序员这样一个称谓，总感觉还是配不上的，真的就只是搬砖的。</li><li>一直觉得这句话很对，代码改变世界。要相信自己的代码，也会有这样一天。路漫漫其修远兮，吾将上下而求索。</li><li>这一年间，写代码的能力涨进不小，学习了SSM后台web框架，一直在写后台的接口，虽然是比较简单的。但是自己有些细节方面还是没处理好。未来的日子会从以下几个方面来提升自己<ul><li>优化代码质量，优化代码风格.代码是写给人看的，不是写给机器看的。</li><li>深入了解SSM的框架的底层。</li><li>读jdk的源码。</li><li>努力往大数据，人工智能的方向靠。</li><li>多看书多看书</li></ul></li></ul><h2 id="对于身体的感悟："><a href="#对于身体的感悟：" class="headerlink" title="对于身体的感悟："></a>对于身体的感悟：</h2><ul><li>身体是革命的本钱，自己一年间运动量大减。以后要加强运动啊。</li></ul><h2 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h2><p><strong> 要像高中时候学习，像大学时候运动。 </strong></p></contents>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring框架简单异步发送邮件</title>
      <link href="/2017/07/09/Spring%E6%A1%86%E6%9E%B6%E7%AE%80%E5%8D%95%E5%BC%82%E6%AD%A5%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
      <url>/2017/07/09/Spring%E6%A1%86%E6%9E%B6%E7%AE%80%E5%8D%95%E5%BC%82%E6%AD%A5%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<contents><h1 id="spring异步发送邮件"><a href="#spring异步发送邮件" class="headerlink" title="spring异步发送邮件"></a>spring异步发送邮件</h1><h2 id="spring-发送邮件"><a href="#spring-发送邮件" class="headerlink" title="spring 发送邮件"></a>spring 发送邮件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">package com.pengm.util;</span><br><span class="line"></span><br><span class="line">import java.util.Properties;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.mail.SimpleMailMessage;</span><br><span class="line">import org.springframework.mail.javamail.JavaMailSenderImpl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 发送告警邮件</span><br><span class="line"> * </span><br><span class="line"> * @author pengm</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class MailUtil &#123;</span><br><span class="line">    private final static Logger logger = LoggerFactory.getLogger( CustomerAdminController.class );</span><br><span class="line">    /**</span><br><span class="line">     * </span><br><span class="line">     * @param subject 主题</span><br><span class="line">     * @param text 内容</span><br><span class="line">     */</span><br><span class="line">    public static void sendMail( String subject, String text ) &#123;</span><br><span class="line">        JavaMailSenderImpl senderImpl = new JavaMailSenderImpl();</span><br><span class="line">        senderImpl.setDefaultEncoding( &quot;utf-8&quot; );</span><br><span class="line">        // 设定mail server</span><br><span class="line">        senderImpl.setHost( &quot;smtp-ent.21cn.com&quot; );</span><br><span class="line">        senderImpl.setPort( 25 );</span><br><span class="line"></span><br><span class="line">        // 建立邮件消息</span><br><span class="line">        SimpleMailMessage mailMessage = new SimpleMailMessage();</span><br><span class="line">        // 设置多人收</span><br><span class="line">        String[] users = new String[] &#123; &quot;pengm@corp.21cn.com&quot; &#125;;</span><br><span class="line">        mailMessage.setTo( users );</span><br><span class="line">        mailMessage.setFrom( &quot;pengm@corp.21cn.com&quot; );</span><br><span class="line">        mailMessage.setSubject( subject );</span><br><span class="line">        mailMessage.setText( text );</span><br><span class="line"></span><br><span class="line">        senderImpl.setUsername( &quot;pengm@corp.21cn.com&quot; );</span><br><span class="line">        senderImpl.setPassword( &quot;xxxx&quot; );</span><br><span class="line"></span><br><span class="line">        Properties prop = new Properties();</span><br><span class="line">        prop.put( &quot;mail.smtp.auth&quot;, &quot;true&quot; ); // 将这个参数设为true，让服务器进行认证,认证用户名和密码是否正确</span><br><span class="line">        prop.put( &quot;mail.smtp.timeout&quot;, &quot;25000&quot; );</span><br><span class="line">        senderImpl.setJavaMailProperties( prop );</span><br><span class="line">        // 发送邮件</span><br><span class="line">        senderImpl.send( mailMessage );</span><br><span class="line"></span><br><span class="line">        logger.warn( &quot;邮件发送成功...&quot; );</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="sping-配置-异步模式"><a href="#sping-配置-异步模式" class="headerlink" title="sping 配置 异步模式"></a>sping 配置 异步模式</h1><ol><li>spring-mvc.xml 配置:需要加入命名空间:</li></ol><blockquote><p>xmlns:task=”<a href="http://www.springframework.org/schema/task&quot;" target="_blank" rel="noopener">http://www.springframework.org/schema/task&quot;</a></p><p><a href="http://www.springframework.org/schema/task" target="_blank" rel="noopener">http://www.springframework.org/schema/task</a><br><a href="http://www.springframework.org/schema/task/spring-task-4.1.xsd" target="_blank" rel="noopener">http://www.springframework.org/schema/task/spring-task-4.1.xsd</a></p></blockquote><p>完整配置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">    xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">    xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:task=&quot;http://www.springframework.org/schema/task&quot;</span><br><span class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd</span><br><span class="line">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd</span><br><span class="line">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd   </span><br><span class="line">        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd</span><br><span class="line">        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd</span><br><span class="line">        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.1.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 启用spring mvc 注解 --&gt;</span><br><span class="line">    &lt;context:annotation-config /&gt;</span><br><span class="line">    &lt;!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 --&gt;</span><br><span class="line">    &lt;context:component-scan base-package=&quot;com.cn21&quot; /&gt;</span><br><span class="line">    &lt;mvc:annotation-driven&gt;</span><br><span class="line">        &lt;mvc:message-converters register-defaults=&quot;true&quot;&gt;</span><br><span class="line">            &lt;!-- 将StringHttpMessageConverter的默认编码设为UTF-8 --&gt;</span><br><span class="line">            &lt;bean class=&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;&gt;</span><br><span class="line">                &lt;constructor-arg value=&quot;UTF-8&quot; /&gt;</span><br><span class="line">            &lt;/bean&gt;</span><br><span class="line">        &lt;/mvc:message-converters&gt;</span><br><span class="line">    &lt;/mvc:annotation-driven&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 异步模式 --&gt;</span><br><span class="line">    &lt;!--异步定义推荐方式  --&gt;  </span><br><span class="line">    &lt;task:executor id=&quot;executor&quot; pool-size=&quot;15&quot; /&gt;  </span><br><span class="line">    &lt;task:scheduler id=&quot;scheduler&quot; pool-size=&quot;30&quot; /&gt;  </span><br><span class="line">    &lt;task:annotation-driven executor=&quot;executor&quot; scheduler=&quot;scheduler&quot; /&gt;  </span><br><span class="line">    </span><br><span class="line">    &lt;!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 --&gt;</span><br><span class="line">    &lt;bean class=&quot;org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter&quot; /&gt;</span><br><span class="line">    &lt;!-- &lt;bean</span><br><span class="line">        class=&quot;org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;messageConverters&quot;&gt;</span><br><span class="line">            &lt;list&gt;</span><br><span class="line">                &lt;ref bean=&quot;mappingJacksonHttpMessageConverter&quot; /&gt; JSON转换器</span><br><span class="line">            &lt;/list&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt; --&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;mvc:resources location=&quot;/assets/&quot; mapping=&quot;/assets/**&quot;/&gt;</span><br><span class="line">    &lt;!-- 定义跳转的文件的前后缀 ，视图模式配置 --&gt;</span><br><span class="line">    &lt;bean</span><br><span class="line">        class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">        &lt;!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 --&gt;</span><br><span class="line">        &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/views/&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot; /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><p>AsyncTaskTest:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.scheduling.annotation.Async;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import com.pengm.util.MailUtil;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public class AsyncTaskTest &#123;</span><br><span class="line"></span><br><span class="line">    @Async</span><br><span class="line">    public void doSomething() throws Exception &#123;</span><br><span class="line">        Thread.sleep( 10000 );</span><br><span class="line">        System.out.println( &quot;begin doSomthing....&quot; );</span><br><span class="line">        doSome();</span><br><span class="line">        Thread.sleep( 10000 );</span><br><span class="line">        System.out.println( &quot;end doSomthing....&quot; );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void doSome() &#123;</span><br><span class="line">        for( int i = 0; i &lt; 10; i++ ) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                Thread.sleep( 2000 );</span><br><span class="line">                System.out.println( i );</span><br><span class="line">            &#125;</span><br><span class="line">            catch( InterruptedException e ) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>adminController:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(value=&quot;/admin&quot;)</span><br><span class="line">public class adminController &#123;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    AsyncTaskTest asyncTask;</span><br><span class="line"></span><br><span class="line">    @RequestMapping( &quot;/test&quot; )</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public String asynTest() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            System.out.println( &quot;我开始执行了！&quot; );</span><br><span class="line">            asyncTask.doSomething();</span><br><span class="line">            System.out.println( &quot;我执行结束了！&quot; );</span><br><span class="line">        &#125;</span><br><span class="line">        catch( Exception e ) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;account/index&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>后台打印结果：</p><blockquote><p>我开始执行了！<br>我执行结束了！<br>begin doSomthing….<br>0<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>end doSomthing….</p></blockquote><h2 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h2><ul><li>异步方法和调用类不要在同一个类中</li><li>注解扫描时，要注意过滤，避免重复实例化，因为存在覆盖问题，@Async就失效了</li></ul></contents>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql优化</title>
      <link href="/2017/07/09/Mysql%E4%BC%98%E5%8C%96/"/>
      <url>/2017/07/09/Mysql%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<contents><h1 id="MySQL优化"><a href="#MySQL优化" class="headerlink" title="MySQL优化"></a>MySQL优化</h1><h2 id="常见的优化步骤"><a href="#常见的优化步骤" class="headerlink" title="常见的优化步骤"></a>常见的优化步骤</h2><ol><li>优化sql语句和索引</li><li>增加缓存：memcached,redis</li><li>主从复制，读写分离</li><li>垂直拆分，水平拆分</li></ol><h2 id="MySQL数据库设计总结"><a href="#MySQL数据库设计总结" class="headerlink" title="MySQL数据库设计总结"></a>MySQL数据库设计总结</h2><ol><li>优先使用MyISAM存储引擎。有事务需要的使用InnoDB存储引擎</li><li>命名规则:<ul><li>表名都小写,单词之间用下划线分开</li><li>表名：tb_业务名称_功能</li></ul></li><li>数据库字段类型定义：<ul><li>变长使用varchar</li><li>把IP地址存成 UNSIGNED INT</li><li>如性别,状态,部门使用 ENUM 而不是 VARCHAR</li><li>小数类型为decimal，禁止使用float和double</li></ul></li><li>每个表都应该有主键自增id, 创建时间，修改时间,状态。方便以后查看</li></ol><h2 id="索引规则"><a href="#索引规则" class="headerlink" title="索引规则"></a>索引规则</h2><ol><li>表的主键、外键必须有索引</li><li>索引应该建在选择性高的字段上</li><li>索引应该建在小字段上，对于大的文本字段甚至超长字段，不要建索引</li><li>频繁进行数据操作的表，不要建立太多的索引</li><li>唯一确定一条记录的一个字段或多个字段要建立主键或者唯一索引，不能唯一确定一条记录，为了查询效率建普通索引</li></ol><h2 id="查询规则"><a href="#查询规则" class="headerlink" title="查询规则"></a>查询规则</h2><ol><li>避免使用 select * from</li><li>delete 删除时候 先select </li><li>能用UNION ALL就不要用UNION</li><li>能用DISTINCT的就不用GROUP BY</li><li>以下情况避免使用，会放弃索引而全表扫描<ul><li>尽量避免在 where 子句中使用!=或&lt;&gt;</li><li>尽量避免在 where 子句中使用 or (使用union all)</li><li>尽量避免在 where 字句中使用 in 和 not in </li></ul></li><li>用 exists 代替 in</li></ol></contents>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 生疏命令</title>
      <link href="/2017/05/29/linux/"/>
      <url>/2017/05/29/linux/</url>
      
        <content type="html"><![CDATA[<contents><h1 id="Linux生疏命令"><a href="#Linux生疏命令" class="headerlink" title="Linux生疏命令"></a>Linux生疏命令</h1><blockquote><p>du -ch  ${localAppUserWithE189File}|grep total|cut -f1</p></blockquote><h2 id="du-命令"><a href="#du-命令" class="headerlink" title="du 命令"></a>du 命令</h2><blockquote><p>  显示每个文件和目录的磁盘使用空间。</p><ul><li>-a 显示目录中个别文件的大小</li><li>-c 除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和。 </li><li>-h 以K，M，G为单位，提高信息的可读性。</li></ul></blockquote><h2 id="cut-命令"><a href="#cut-命令" class="headerlink" title="cut 命令"></a>cut 命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 用-d来设置间隔符为冒号，然后用-f来设置取的范围</span><br><span class="line">cut -d : -f 1</span><br></pre></td></tr></table></figure><h2 id="shell-输入输出重定向"><a href="#shell-输入输出重定向" class="headerlink" title="shell 输入输出重定向"></a>shell 输入输出重定向</h2><h3 id="输出重定向-gt-或者-gt-gt"><a href="#输出重定向-gt-或者-gt-gt" class="headerlink" title="输出重定向  &gt;或者&gt;&gt;"></a>输出重定向  &gt;或者&gt;&gt;</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 会覆盖之前的内容</span><br><span class="line">&gt;&gt; 追加方式,不会覆盖之前内容</span><br></pre></td></tr></table></figure><h3 id="输入重定向-lt"><a href="#输入重定向-lt" class="headerlink" title="输入重定向 &lt;"></a>输入重定向 &lt;</h3><blockquote></blockquote><p>一般情况下，每个 Unix/Linux 命令运行时都会打开三个文件：</p><ul><li>标准输入文件(stdin)：stdin的文件描述符为0，Unix程序默认从stdin读取数据。</li><li>标准输出文件(stdout)：stdout 的文件描述符为1，Unix程序默认向stdout输出数据。</li><li>标准错误文件(stderr):stderr的文件描述符为2，Unix程序会向stderr流中写入错误信息。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$command &gt;file  :将stdout重定向到file</span><br><span class="line">$command &lt; file  ：将stdin 重定向到file</span><br><span class="line"></span><br><span class="line">$command 2 &gt;file  :将stderr重定向到file</span><br><span class="line">$command 2 &gt;&gt;file  :将stderr以追加方式重定向到file</span><br><span class="line"></span><br><span class="line">$command &gt;file 2&gt;&amp;1  : stdout 和 stderr 合并后重定向到 file</span><br><span class="line">$command &gt;&gt;file  2&gt;&amp;1 : stdout 和 stderr 合并后以追加方式重定向到 file</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#-i 忽略大小写</span><br><span class="line">cat $&#123;WgetFile&#125;|grep -i STATUS_INFO &gt;&gt;  $&#123;WgetLog&#125;</span><br></pre></td></tr></table></figure><h2 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h2><p>文件处理参数：</p><ul><li>-o 将软件输出信息保存到文件</li><li>-a 将软件输出信息追加保存到文件</li><li>-d 显示输出信息</li><li>-q 不显示输出信息</li><li>-v (verbose)详尽的输出(此为默认值)。</li><li>-nv 关闭详尽输出，但不进入安静模式。</li><li>-i 从文件中获取url</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># </span><br><span class="line">wget -o  /data/test/wget_out.txt  www.baidu.com</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">wget -a  /data/test/wget_out.txt  www.baidu.com</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">wget -d www.baidu.com</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">wget -q wwww.baidu.com</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">wget -i /data/test/fileurl.txt</span><br></pre></td></tr></table></figure><p>下载参数：</p><ul><li>-t 下载次数(0表示多次)</li><li>-O 下载文件保存为别的文件名</li><li>-nc 不要覆盖已经存在的文件</li><li>-N 只下载比本地新的文件</li><li>-T 设置超时时间</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># </span><br><span class="line">wget -nv -t1 -O $&#123;WgetFile&#125; -a $&#123;WgetLog&#125;  http\:\/\/www.baidu.com\:8082</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#hadoop 设置回收站</span><br><span class="line"></span><br><span class="line">#如果没有回收站，那么执行下面就文件直接会被删除</span><br><span class="line">hadoop fs -rmr </span><br><span class="line"></span><br><span class="line">#为了避免误删除 需要设置开启垃圾箱 在core-site.xml 添加配置</span><br><span class="line">&lt;property&gt;  </span><br><span class="line">  &lt;name&gt;fs.trash.interval&lt;/name&gt;  </span><br><span class="line">  &lt;value&gt;1440&lt;/value&gt;  </span><br><span class="line">&lt;/property&gt;  </span><br><span class="line"></span><br><span class="line">#这样就开启垃圾回收站了</span><br><span class="line"></span><br><span class="line"># -skipTrash  直接删除</span><br><span class="line">hadoop fs -rm -r -skipTrash</span><br></pre></td></tr></table></figure></contents>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy爬取新民网</title>
      <link href="/2017/04/03/Scrapy-xinmin/"/>
      <url>/2017/04/03/Scrapy-xinmin/</url>
      
        <content type="html"><![CDATA[<contents><h2 id="scrapy编写"><a href="#scrapy编写" class="headerlink" title="scrapy编写"></a>scrapy编写</h2><p>1.建立scrapy项目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject xinmin</span><br></pre></td></tr></table></figure></p><p>项目结构如图：<br><img src="http://img.blog.csdn.net/20170403142911824?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDc0MjA0OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="scrapy框架目录"></p><p>2.编写items,定义爬取内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 发布者</span><br><span class="line">publishername = scrapy.Field()</span><br><span class="line"></span><br><span class="line"># 分类</span><br><span class="line">category = scrapy.Field()</span><br><span class="line"></span><br><span class="line"># 标题</span><br><span class="line">title = scrapy.Field()</span><br><span class="line"></span><br><span class="line"># 正文</span><br><span class="line">text = scrapy.Field()</span><br><span class="line"> </span><br><span class="line"># 网址链接</span><br><span class="line">linkurl = scrapy.Field()</span><br><span class="line"></span><br><span class="line"># 发布时间</span><br><span class="line">publishtime = scrapy.Field()</span><br></pre></td></tr></table></figure></p><p>3.编写spilder</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import scrapy</span><br><span class="line">from scrapy.spiders import CrawlSpider</span><br><span class="line">from scrapy.selector import Selector</span><br><span class="line">from xinmin.items import XinminItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class XinminSpider(CrawlSpider):</span><br><span class="line">    #初始化</span><br><span class="line">    name = &quot;xinmin&quot;</span><br><span class="line">    allowed_domains = [&quot;shanghai.xinmin.cn&quot;]</span><br><span class="line">    start_urls = [&apos;http://shanghai.xinmin.cn/t/gdbd/&apos;]</span><br><span class="line">    #srartUrl = &apos;http://shanghai.xinmin.cn/t/gdbd/&apos;</span><br><span class="line">    </span><br><span class="line">    #解析页面的所以新闻链接</span><br><span class="line">    def parse(self, response):</span><br><span class="line">        selector = Selector(response)</span><br><span class="line">        # 获取当前页面所有新闻的链接</span><br><span class="line">        newslink_list = selector.xpath(&quot;//div[contains(@class,&apos;list_list&apos;)]/a/@href&quot;).extract()</span><br><span class="line">        # 读取每一个链接</span><br><span class="line">        for link_url in newslink_list:</span><br><span class="line">            #print(&quot;新闻链接:&quot;, link_url)</span><br><span class="line">            yield scrapy.Request(link_url, callback=self.parse_item)</span><br><span class="line"></span><br><span class="line">        # 下一页</span><br><span class="line">        next_url = self.start_urls[0] + response.xpath(&apos;//a[@class=&quot;unselect&quot;]/@href&apos;).extract_first()  # 翻页</span><br><span class="line">        print(&apos;next_url&apos;, next_url)</span><br><span class="line">        if next_url:</span><br><span class="line">            yield scrapy.Request(next_url, callback=self.parse)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     # 抓取新闻详细内容</span><br><span class="line">    def parse_item(self, response):</span><br><span class="line">        #print(&apos;开始处理item...&apos;)</span><br><span class="line">        item = XinminItem()</span><br><span class="line">        selector = Selector(response)</span><br><span class="line">        # 网址链接</span><br><span class="line">        item[&apos;linkurl&apos;] = response.url</span><br><span class="line"></span><br><span class="line">        # 分类 +</span><br><span class="line">        item[&apos;category&apos;] = selector.xpath(&quot;//div[contains(@class,&apos;xinminMianbaoxue&apos;)]/a[3]/text()&quot;).extract()</span><br><span class="line">        # 标题</span><br><span class="line">        item[&apos;title&apos;] = selector.xpath(&quot;//h1[contains(@class,&apos;article_title&apos;)]/text()&quot;).extract()</span><br><span class="line">        # 正文</span><br><span class="line">        item[&apos;text&apos;] = selector.xpath(&quot;//div[contains(@class,&apos;a_p&apos;)]/p/text()&quot;).extract()</span><br><span class="line"></span><br><span class="line">        # 发布时间 这两个会变化</span><br><span class="line">        info=selector.xpath(&quot;html/body/div[4]/div[1]/div[2]/div[2]/div/span[4]/text()&quot;).extract()</span><br><span class="line">        item[&apos;publishtime&apos;] = selector.xpath(&quot;//div[contains(@class,&apos;info&apos;)]/span[3]/text()&quot;).extract()</span><br><span class="line">        # 发布者</span><br><span class="line">        # xpath语句太长 下一版修改</span><br><span class="line">        item[&apos;publishername&apos;] = selector.xpath(&quot;//div[contains(@class,&apos;info&apos;)]/span[4]/text()&quot;).extract()</span><br><span class="line">        yield item</span><br></pre></td></tr></table></figure><p>4.settings 修改设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Obey robots.txt rules</span><br><span class="line">ROBOTSTXT_OBEY = False</span><br><span class="line"></span><br><span class="line">DOWNLOAD_DELAY = 4</span><br><span class="line"></span><br><span class="line">COOKIES_ENABLED = False</span><br></pre></td></tr></table></figure></p><p>5.编写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">class XinminPipeline(object):</span><br><span class="line">    #去掉空格换行符</span><br><span class="line">    @staticmethod</span><br><span class="line">    def get_list(data_list):</span><br><span class="line">        data_str = &apos;&apos;</span><br><span class="line">        for i in data_list:</span><br><span class="line">            i = str(i).strip()</span><br><span class="line">            data_str = data_str + i</span><br><span class="line"></span><br><span class="line">        return data_str</span><br><span class="line"></span><br><span class="line">    #写入文件</span><br><span class="line">    def process_item(self, item, spider):</span><br><span class="line">        today = time.strftime(&quot;%Y-%m-%d&quot;, time.localtime())</span><br><span class="line">        # 文件路径</span><br><span class="line">        file_path = &quot;../data/&quot;+today+&quot;.txt&quot;</span><br><span class="line">        with open(file_path, &quot;a&quot;, encoding=&quot;utf-8&quot;) as f:</span><br><span class="line">            print(&apos;开始写入文件....&apos;)</span><br><span class="line">            f.write(&quot;linkurl:&quot; + self.get_list(item[&apos;linkurl&apos;]) + &quot;\n&quot;)</span><br><span class="line">            f.write(&quot;title:&quot; + self.get_list(item[&apos;title&apos;]) + &quot;\n&quot;)</span><br><span class="line">            f.write(&quot;category:&quot; + self.get_list(item[&apos;category&apos;]) + &quot;\n&quot;)</span><br><span class="line">            f.write(&quot;publishername:&quot; + self.get_list(item[&apos;publishername&apos;]) + &quot;\n&quot;)</span><br><span class="line">            f.write(&quot;publishtime:&quot; + self.get_list(item[&apos;publishtime&apos;]) + &quot;\n&quot;)</span><br><span class="line">            f.write(&quot;text:&quot; + self.get_list(item[&apos;text&apos;]) + &quot;\n&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            f.write(&quot;\n&quot;)</span><br><span class="line"></span><br><span class="line">            print(&apos;成功写入...&apos;)</span><br><span class="line">        return item</span><br></pre></td></tr></table></figure></p><p>##未完善的地方<br>1.有两个抓取的指标（作者，发布日期）会变，没有处理<br>2.没有考虑反爬的问题</p></contents>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java代码审查</title>
      <link href="/2017/03/03/java-demo/"/>
      <url>/2017/03/03/java-demo/</url>
      
        <content type="html"><![CDATA[<contents><p>1.工具类或者常量类里面的方法都是静态的，建议直接用类名调用，不用创建对象，所以将构造方法私有化，禁止创建对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//error example:</span><br><span class="line">public  class StringUtils&#123;</span><br><span class="line">    /**</span><br><span class="line">     * 判断一个字符串是否为英文中文或数字</span><br><span class="line">     * </span><br><span class="line">     * @param str</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static boolean isLetterDigitOrChinese( String str ) &#123;</span><br><span class="line">        String regex = &quot;^[a-z0-9A-Z\u4e00-\u9fa5]+$&quot;;</span><br><span class="line">        return str.matches( regex );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> //right example:</span><br><span class="line"> public  class StringUtils&#123;</span><br><span class="line">  //添加构造私有构造方法</span><br><span class="line">    private StringUtils&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 判断一个字符串是否为英文中文或数字</span><br><span class="line">     * </span><br><span class="line">     * @param str</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static boolean isLetterDigitOrChinese( String str ) &#123;</span><br><span class="line">        String regex = &quot;^[a-z0-9A-Z\u4e00-\u9fa5]+$&quot;;</span><br><span class="line">        return str.matches( regex );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.NPE(空指针异常)-equals</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//error </span><br><span class="line">String testString=&quot;abc&quot;;</span><br><span class="line">if(testString.equals(&quot;abc&quot;))&#123;</span><br><span class="line"></span><br><span class="line">&#125;else&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">//right</span><br><span class="line">String testString=&quot;abc&quot;;</span><br><span class="line">if(&quot;abc&quot;.eqauls(testString))&#123;</span><br><span class="line">//code</span><br><span class="line">&#125;else&#123;</span><br><span class="line">//code</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.map list 新建 (java 1.7 )</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// Noncompliant</span><br><span class="line">List&lt;String&gt; strings = new ArrayList&lt;String&gt;();  </span><br><span class="line">Map&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;String,List&lt;Integer&gt;&gt;();  </span><br><span class="line"></span><br><span class="line">//Compliant Solution</span><br><span class="line">List&lt;String&gt; strings = new ArrayList&lt;&gt;();</span><br><span class="line">Map&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;&gt;();</span><br></pre></td></tr></table></figure><p>4.使用isEmpty 来判断集合是否为空<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//Noncompliant</span><br><span class="line">if(data.size==0)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//compliant</span><br><span class="line">if(data.isEmpty)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>5.数组定义 (“[]” 在变量名字前面)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//Noncompliant</span><br><span class="line">int arr[]=&#123;&#125;;</span><br><span class="line"></span><br><span class="line">//compliant</span><br><span class="line">int[] arr=&#123;&#125;;</span><br></pre></td></tr></table></figure></p><p>6.字符串转换为数字<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//Noncompliant</span><br><span class="line">String numString=&quot;12222222&quot;;</span><br><span class="line">long numLong=Long.valueOf(numString);</span><br><span class="line">//compliant</span><br><span class="line">String numString=&quot;12222222&quot;;</span><br><span class="line">long posNum=Long.parseLong( posMap.get( &quot;num&quot; ).toString());</span><br></pre></td></tr></table></figure></p><p>7.公共静态成员应该加上final，也就是public static final 一般不分家</p></contents>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习scala和spark的一些内容</title>
      <link href="/2016/12/23/StudySpark/"/>
      <url>/2016/12/23/StudySpark/</url>
      
        <content type="html"><![CDATA[<contents><h2 id="scala中的函数一些用法"><a href="#scala中的函数一些用法" class="headerlink" title="scala中的函数一些用法"></a>scala中的函数一些用法</h2><ul><li>trim 开头和结尾的空白忽略</li><li>map 对每一条输入进行指定的操作，然后为每一条输入返回一个对象</li><li>filter 过滤</li></ul><h2 id="scala-特殊符号用法"><a href="#scala-特殊符号用法" class="headerlink" title="scala 特殊符号用法"></a>scala 特殊符号用法</h2><ul><li>::: 三个冒号运算符(list的连接操作)</li><li>:: 两个冒号运算符：表示普通元素与list的连接操作</li><li>_N下划线数字运算符：用于访问元组的第N个元素，N的取值从1开始(元组的元素类型可以不同。)</li><li>&lt;- 用于遍历集合对象</li><li>=&gt; 匿名函数 </li><li>Int =&gt; String表示函数输入为Int型，返回String型，同Function(Int,String) () =&gt; T表示函数没有输入参数，但返回T</li></ul><h2 id="scala中下划线含义"><a href="#scala中下划线含义" class="headerlink" title="scala中下划线含义"></a>scala中下划线含义</h2><ul><li>_ 下划线 有很多含义<br>1.通配符<br>2.匿名函数<br>3.指代集合中的每一个元素。例如筛选列表中大于某个值的元素<br>4.使用模式匹配可以用来获取元组的组员。<blockquote><p>val m = Map(1 -&gt; 2,2 -&gt; 4) for ((k,) &lt;- m) println(k)<br>//只取key,因此在value处用_</p></blockquote></li></ul><p>5.:_* 作为一个整体，告诉编译器你希望将某个参数当作数序列处理。<br>6.+=：为map类型变量添加元素 -=：为map类型变量移除元素及其对应的值</p><h2 id="小括号与大括号"><a href="#小括号与大括号" class="headerlink" title="小括号与大括号"></a>小括号与大括号</h2><ul><li>scala中函数的小括号，可以用花括号来表示，即foo{xx} 与 foo(xx)是一回事儿。</li><li>对于只有一个参数的方法，其小括号是可以省略的，map(lambda)可写为 map lambda，即这块{case 2 =&gt; “OK”}连同花括号整体是一个lambda(函数字面量)。<blockquote><p>// map方法这样写不能编译通过<br>scala&gt; List(2).map( case 2 =&gt; “OK” )<br>// 换做花括号就可以了<br>scala&gt; List(2).map{ case 2 =&gt; “OK” }</p></blockquote></li></ul><h2 id="Option-T"><a href="#Option-T" class="headerlink" title="Option[T]"></a>Option[T]</h2><ul><li>用 Option[T] 来避免 NullPointerException</li><li>Option有两个子类别，Some和None。当程序回传Some的时候，代表这个函式成功地给了你一个String，而你可以透过get()函数拿到那个String，如果程序返回的是None，则代表没有字符串可以给你。<h2 id="reduceLeft-和-reduce"><a href="#reduceLeft-和-reduce" class="headerlink" title="reduceLeft 和 reduce"></a>reduceLeft 和 reduce</h2></li><li>reduceLeft 和 reduceRight 我们可以强制处理元素的方向。（使用 reduce 方向是不被保证的）</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li><p>函数和方法一般用def定义；也可以用val定义匿名函数，或者定义函数别名。</p><blockquote><p>def m0(x:Int) = x<em>x<br>val m1 = (x:Int)=&gt; x</em>x // 用(), ()是必须的<br>val m2 = {x:Int=&gt; x*x} // 用{}, {}是必须的</p></blockquote></li><li><p>不需要返回值的函数，可以使用def f() {…}，永远返回Unit（即使使用了return）,即：<br>  def f() {…}  等价于 def f():Unit = {…}</p></li><li><p>需要返回值的函数，用 def f() = {…} 或者 def f = {…}</p></li><li><p>对象的无参数方法的调用，可以省略.和()</p><blockquote><p>“hello world” toUpperCase // “HELLO WORLD”</p></blockquote></li><li><p>匿名函数  ((命名参数列表)=&gt;函数实现)(参数列表)<br>1.无参数： (()=&gt;函数实现)()<br>2.有一个参数且在最后： (函数实现)(参数)<br>3.无返回值： ((命名参数列表)=&gt;Unit)(参数列表)</p></li></ul><h2 id="spark-性能小技巧"><a href="#spark-性能小技巧" class="headerlink" title="spark 性能小技巧"></a>spark 性能小技巧</h2><ul><li>collect() 通常在单元测试中使用.只有当你的整个数据集能在单台机器的内存中放得下时，才能使用collect()，因此，collect() 不能用在大规模数据集上。</li><li>distinct() 操作的开销很大，因为它需要将所有数据通过网络进行混洗（shuffle）</li></ul><h2 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h2><ul><li>偏函数：当函数有多个参数，而在使用该函数时不想提供所有参数（比如函数有3个参数），只提供0~2个参数，此时得到的函数便是偏函数。</li></ul></contents>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spark </tag>
            
            <tag> scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客：HBase</title>
      <link href="/2016/12/17/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2016/12/17/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<contents><p></p><h1>hbase读写过程</h1><p></p><p></p><h4>今天终于用github 和 hexo 在windows的机器上配置成功了。</h4><p></p><p></p><h4>接下来会写一篇搭建过程。</h4><p></p><p></p><p>对于大数据来说，hbase作为nosql数据库中的一种，而且分布式的、面向列的开源数据库。读写速度都比较快。</p><p></p><h1 id="HBase-写数据"><a href="#HBase-写数据" class="headerlink" title="HBase 写数据"></a>HBase 写数据</h1><ol><li>Client写入</li><li>存入MemStore，一直到MemStore满</li><li>Flush成一个StoreFile，直至增长到一定阈值</li><li>触发Compact合并操作</li><li>多个StoreFile合并成一个StoreFile，同时进行版本合并和数据删除</li><li>当StoreFiles Compact后，逐步形成越来越大的StoreFile</li><li>单个StoreFile大小超过一定阈值后，触发Split操作，把当前Region Split成2个Region，Region会下线，新Split出的2个孩子Region会被HMaster分配到相应的HRegionServer上，使得原先1个Region的压力得以分流到2个Region上</li></ol><h4 id="HBase只是增加数据，有所得更新和删除操作，都是在Compact阶段做的，所以，用户写操作只需要进入到内存即可立即返回，从而保证I-O高性能。"><a href="#HBase只是增加数据，有所得更新和删除操作，都是在Compact阶段做的，所以，用户写操作只需要进入到内存即可立即返回，从而保证I-O高性能。" class="headerlink" title="HBase只是增加数据，有所得更新和删除操作，都是在Compact阶段做的，所以，用户写操作只需要进入到内存即可立即返回，从而保证I/O高性能。"></a>HBase只是增加数据，有所得更新和删除操作，都是在Compact阶段做的，所以，用户写操作只需要进入到内存即可立即返回，从而保证I/O高性能。</h4><h5 id="HStore存储是HBase存储的核心，其中由两部分组成，一部分是MemStore，一部分是StoreFiles。"><a href="#HStore存储是HBase存储的核心，其中由两部分组成，一部分是MemStore，一部分是StoreFiles。" class="headerlink" title="HStore存储是HBase存储的核心，其中由两部分组成，一部分是MemStore，一部分是StoreFiles。"></a><li>HStore存储是HBase存储的核心，其中由两部分组成，一部分是MemStore，一部分是StoreFiles。</li></h5><h5 id="HLog的功能：在分布式系统环境中，无法避免系统出错或者宕机，一旦HRegionServer以外退出，MemStore中的内存数据就会丢失，引入HLog就是防止这种情况。"><a href="#HLog的功能：在分布式系统环境中，无法避免系统出错或者宕机，一旦HRegionServer以外退出，MemStore中的内存数据就会丢失，引入HLog就是防止这种情况。" class="headerlink" title="HLog的功能：在分布式系统环境中，无法避免系统出错或者宕机，一旦HRegionServer以外退出，MemStore中的内存数据就会丢失，引入HLog就是防止这种情况。"></a><li>HLog的功能：在分布式系统环境中，无法避免系统出错或者宕机，一旦HRegionServer以外退出，MemStore中的内存数据就会丢失，引入HLog就是防止这种情况。</li></h5><h1 id="HBase-读数据"><a href="#HBase-读数据" class="headerlink" title="HBase 读数据"></a>HBase 读数据</h1><ol><li>client</li><li>zookeeper</li><li>.Root</li><li>.META</li></ol><p>用户数据表zookeeper记录了.ROOT的路径信息（root只有一个region），.ROOT里记录了.META的region信息， （.META可能有多个region），.META里面记录了region的信息。</p></contents>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HBase </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2016/12/16/hello-world/"/>
      <url>/2016/12/16/hello-world/</url>
      
        <content type="html"><![CDATA[<contents><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p></contents>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> yelee </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>about me</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="爱打篮球的不宅技术大男孩"><a href="#爱打篮球的不宅技术大男孩" class="headerlink" title="爱打篮球的不宅技术大男孩"></a>爱打篮球的不宅技术大男孩</h2>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>归档</title>
      <link href="/archive/index.html"/>
      <url>/archive/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
